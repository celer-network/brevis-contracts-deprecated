{
  "address": "0x19b7aF7A7739E27413F5CB6a6ad916ffF78fD9C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_blocChunks",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateBlockChunks",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "UpdateVerifierAddress",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BlockChunks",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_BlockChunks",
          "type": "address"
        }
      ],
      "name": "updateBlockChunks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_chainId",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "_verifierAddress",
          "type": "address"
        }
      ],
      "name": "updateVerifierAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "name": "verifierAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "blkVerifyInfo",
          "type": "bytes"
        }
      ],
      "name": "verifySlotValue",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "chainId",
              "type": "uint64"
            },
            {
              "internalType": "bytes32",
              "name": "addrHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "blkHash",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "slotKey",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "slotValue",
              "type": "bytes32"
            },
            {
              "internalType": "uint32",
              "name": "blkNum",
              "type": "uint32"
            }
          ],
          "internalType": "struct ISlotValueVerifier.SlotInfo",
          "name": "slotInfo",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4a9e6ac7350535d513fa66936399938253d8c15127ca3fd374125c9dd07f3e5b",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0x19b7aF7A7739E27413F5CB6a6ad916ffF78fD9C1",
    "transactionIndex": 10,
    "gasUsed": "686158",
    "logsBloom": "0x
    "blockHash": "0xcbdbf863ce87869a4b02f4a2443b4d135dea46590b50e95329970d15f650f0c6",
    "transactionHash": "0x4a9e6ac7350535d513fa66936399938253d8c15127ca3fd374125c9dd07f3e5b",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 30505984,
        "transactionHash": "0x4a9e6ac7350535d513fa66936399938253d8c15127ca3fd374125c9dd07f3e5b",
        "address": "0x19b7aF7A7739E27413F5CB6a6ad916ffF78fD9C1",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009532f934efce6c4bf5ba078b25fdd81a780fbdfb"
        ],
        "data": "0x",
        "logIndex": 22,
        "blockHash": "0xcbdbf863ce87869a4b02f4a2443b4d135dea46590b50e95329970d15f650f0c6"
      }
    ],
    "blockNumber": 30505984,
    "cumulativeGasUsed": "2895708",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x420755E97ca29314dB49ae019161f4b52012AADf"
  ],
  "numDeployments": 2,
  "solcInputHash": "ce59f34ab3a9265892ad529586d4507a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_blocChunks\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateBlockChunks\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"UpdateVerifierAddress\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BlockChunks\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BlockChunks\",\"type\":\"address\"}],\"name\":\"updateBlockChunks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_chainId\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"_verifierAddress\",\"type\":\"address\"}],\"name\":\"updateVerifierAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"name\":\"verifierAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"blkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"verifySlotValue\",\"outputs\":[{\"components\":[{\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"addrHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"blkHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotKey\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"slotValue\",\"type\":\"bytes32\"},{\"internalType\":\"uint32\",\"name\":\"blkNum\",\"type\":\"uint32\"}],\"internalType\":\"struct ISlotValueVerifier.SlotInfo\",\"name\":\"slotInfo\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/SlotValueVerifier.sol\":\"SlotValueVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/chunk-sync/interfaces/IBlockChunks.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IBlockChunks {\\n    // historicalRoots(chainId, startBlockNumber) is 0 unless (startBlockNumber % 128 == 0)\\n    // historicalRoots(chainId, startBlockNumber) holds the hash of\\n    //   prevHash || root || numFinal\\n    // where\\n    // - prevHash is the parent hash of block startBlockNumber\\n    // - root is the partial Merkle root of blockhashes of block numbers\\n    //   [startBlockNumber, startBlockNumber + 128)\\n    //   where unconfirmed block hashes are 0's\\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + 128)\\n    function historicalRoots(uint64 chainId, uint32 startBlockNumber) external view returns (bytes32);\\n\\n    event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal);\\n\\n    struct BlockHashWitness {\\n        uint64 chainId;\\n        uint32 blkNum;\\n        bytes32 claimedBlkHash;\\n        bytes32 prevHash;\\n        uint32 numFinal;\\n        bytes32[7] merkleProof;\\n    }\\n\\n    // update blocks in the \\\"backward\\\" direction, anchoring on a \\\"recent\\\" end blockhash from anchor contract\\n    // * startBlockNumber must be a multiple of 128\\n    // * for now always endBlockNumber = startBlockNumber + 127 (full update on every 128 blocks chunk)\\n    function updateRecent(uint64 chainId, bytes calldata proofData) external;\\n\\n    // update older blocks in \\\"backwards\\\" direction, anchoring on more recent trusted blockhash\\n    // must be batch of 128 blocks\\n    function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external;\\n\\n    function isBlockHashValid(BlockHashWitness calldata witness) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x2f33a1b7daa1d8b05f3b4aebeea58b7b8d261c279f350c751796de281cbf464e\",\"license\":\"MIT\"},\"contracts/verifiers/SlotValueVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/ISlotValueVerifier.sol\\\";\\nimport \\\"./interfaces/IZkpVerifier.sol\\\";\\nimport \\\"../chunk-sync/interfaces/IBlockChunks.sol\\\";\\n\\ncontract SlotValueVerifier is ISlotValueVerifier, Ownable {\\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32;\\n\\n    // retrieved from proofData, to align the fields with circuit...\\n    struct ProofData {\\n        bytes32 blkHash;\\n        bytes32 addrHash;\\n        bytes32 slotKey;\\n        bytes32 slotValue;\\n        uint32 blkNum;\\n    }\\n\\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\\n    address public BlockChunks;\\n\\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\\n    event UpdateBlockChunks(address newAddress);\\n\\n    constructor(address _blocChunks) {\\n        BlockChunks = _blocChunks;\\n    }\\n\\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\\n        verifierAddresses[_chainId] = _verifierAddress;\\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\\n    }\\n\\n    function updateBlockChunks(address _BlockChunks) external onlyOwner {\\n        BlockChunks = _BlockChunks;\\n        emit UpdateBlockChunks(_BlockChunks);\\n    }\\n\\n    function verifySlotValue(\\n        uint64 chainId,\\n        bytes calldata proofData,\\n        bytes calldata blkVerifyInfo\\n    ) external view returns (SlotInfo memory slotInfo) {\\n        require(verifyRaw(chainId, proofData));\\n\\n        (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) = getFromBlkVerifyInfo(blkVerifyInfo);\\n        ProofData memory data = getProofData(proofData);\\n\\n        IBlockChunks.BlockHashWitness memory witness = IBlockChunks.BlockHashWitness({\\n            chainId: chainId,\\n            blkNum: data.blkNum,\\n            claimedBlkHash: data.blkHash,\\n            prevHash: prevHash,\\n            numFinal: numFinal,\\n            merkleProof: merkleProof\\n        });\\n        require(IBlockChunks(BlockChunks).isBlockHashValid(witness), \\\"invalid blkHash\\\");\\n\\n        slotInfo.chainId = chainId;\\n        slotInfo.blkHash = data.blkHash;\\n        slotInfo.addrHash = data.addrHash;\\n        slotInfo.blkNum = data.blkNum;\\n        slotInfo.slotKey = data.slotKey;\\n        slotInfo.slotValue = data.slotValue;\\n    }\\n\\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\\n        require(verifierAddresses[chainId] != address(0), \\\"chain verifier not set\\\");\\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\\n    }\\n\\n    function getFromBlkVerifyInfo(\\n        bytes calldata blkVerifyInfo\\n    ) internal pure returns (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) {\\n        require(blkVerifyInfo.length == 8 * 32 + 4, \\\"incorrect blkVerifyInfo\\\");\\n        prevHash = bytes32(blkVerifyInfo[:32]);\\n        numFinal = uint32(bytes4(blkVerifyInfo[32:36]));\\n\\n        for (uint8 idx = 0; idx < 6; idx++) {\\n            merkleProof[idx] = bytes32(blkVerifyInfo[36 + 32 * idx:36 + 32 * (idx + 1)]);\\n        }\\n\\n        merkleProof[6] = bytes32(blkVerifyInfo[36 + 32 * 6:36 + 32 * (6 + 1)]);\\n    }\\n\\n    // groth16 proof + public inputs\\n    // public inputs:\\n    //  block hash\\n    //  contractAddrHash\\n    //  slot key\\n    //  slot value\\n    //  block number\\n    function getProofData(bytes calldata proofData) internal pure returns (ProofData memory data) {\\n        data.blkHash = bytes32(\\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\\n        );\\n        data.addrHash = bytes32(\\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\\n        );\\n        data.slotKey = bytes32(\\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32])) << 128) |\\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 + 16:PUBLIC_BYTES_START_IDX + 6 * 32]))\\n        );\\n        data.slotValue = bytes32(\\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 6 * 32:PUBLIC_BYTES_START_IDX + 7 * 32])) << 128) |\\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 7 * 32 + 16:PUBLIC_BYTES_START_IDX + 8 * 32]))\\n        );\\n        data.blkNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 9 * 32 - 4:PUBLIC_BYTES_START_IDX + 9 * 32]));\\n    }\\n}\\n\",\"keccak256\":\"0xb2a6531d88b69aba39d78626dd079cd126d1dcaa2d78ed330ea789c1756b9d2a\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/ISlotValueVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ISlotValueVerifier {\\n    struct SlotInfo {\\n        uint64 chainId;\\n        bytes32 addrHash;\\n        bytes32 blkHash;\\n        bytes32 slotKey;\\n        bytes32 slotValue;\\n        uint32 blkNum;\\n    }\\n\\n    function verifySlotValue(\\n        uint64 chainId,\\n        bytes calldata proofData,\\n        bytes calldata blkVerifyInfo\\n    ) external view returns (SlotInfo memory slotInfo);\\n}\\n\",\"keccak256\":\"0xef9cd54c629e195e924bc9e92eee67df53fc906f46daacdb4388d8b73352ac58\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/IZkpVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface IZkpVerifier {\\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x180d5c22339cff67100807cd564dde6d7ae21d5c8073e9ade51053fe1ece22e2\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f610b6438819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36002541617600255610aa190816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608080604052600436101561001357600080fd5b60003560e01c9081630215d01314610925575080630b885e531461032a5780631eeb86da146102ba578063715018a61461025d5780638da5cb5b14610236578063ec4ffc521461019e578063f2fde38b146100c05763f5cec6af1461007757600080fd5b346100bb5760203660031901126100bb5767ffffffffffffffff610099610949565b16600052600160205260206001600160a01b0360406000205416604051908152f35b600080fd5b346100bb5760203660031901126100bb576100d961098e565b600054906001600160a01b03808316916100f43384146109a4565b16918215610133576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346100bb5760403660031901126100bb576101b7610949565b602435906001600160a01b03918281168091036100bb5767ffffffffffffffff60409261020a7ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f956000541633146109a4565b169081600052600160205282600020816001600160a01b031982541617905582519182526020820152a1005b346100bb5760003660031901126100bb5760206001600160a01b0360005416604051908152f35b346100bb5760003660031901126100bb57600080546001600160a01b03196001600160a01b038216916102913384146109a4565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100bb5760203660031901126100bb577f0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a9860206102f661098e565b6001600160a01b039061030e826000541633146109a4565b16806001600160a01b03196002541617600255604051908152a1005b346100bb5760603660031901126100bb57610343610949565b60243567ffffffffffffffff81116100bb57610363903690600401610960565b9160443567ffffffffffffffff81116100bb57610384903690600401610960565b929060405194610393866109ef565b6000865260006020870152600060408701526000606087015260006080870152600060a087015267ffffffffffffffff841660005260016020526001600160a01b0360406000205416156108e05767ffffffffffffffff841660005260016020526001600160a01b0360406000205416602060405180926322bb937360e11b82528260048301528460248301528487604484013760006044868401015281604481601f19601f89011681010301915afa908115610840576000916108c1575b50156100bb576040519360e0850185811067ffffffffffffffff8211176108665760405260e0368637610104860361087c57856020116100bb57856024116100bb5760005b60ff60068183161015610562576104b56104b083610a45565b610a5a565b9060018184160181811161051e576104d06104b08392610a45565b1680828416116100bb578981116100bb579181168681013592036020811061054a575b506007908316101561053457611fe08260051b1687015260ff80911690811461051e57600101610497565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60001960209190910360031b1b9091169060076104f3565b50508684868589610104116100bb5760e481013560c08301526040519560a0870187811067ffffffffffffffff8211176108665760405280610160116100bb5780610180116100bb5761017084013560801c61014085013560801b178752806101a0116100bb57806101c0116100bb576101b084013560801c61018085013560801b176020880152806101e0116100bb5780610200116100bb576101f084013560801c6101c085013560801b17604088015280610220116100bb5780610240116100bb5761023084013560801c61020085013560801b176060880152610260116100bb57906020839261025c60a095013560e01c608089015260405193610668856109ef565b67ffffffffffffffff8816855261025c81013560e01c8386015261014061017082013560801c91013560801b17604085015280356060850152013560e01c6080830152828201526001600160a01b036002541690604051928391631513dce960e21b835267ffffffffffffffff815116600484015263ffffffff6020820151166024840152604081015160448401526060810151606484015263ffffffff6080820151166084840152015160a482016000905b6007821061084c57505050610184816020935afa90811561084057600091610811575b50156107cc5760a063ffffffff91606060c09567ffffffffffffffff86168352805160408401526020810151602084015284608082015116848401526040810151828401520151608082015267ffffffffffffffff604051941684526020810151602085015260408101516040850152606081015160608501526080810151608085015201511660a0820152f35b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420626c6b4861736800000000000000000000000000000000006044820152606490fd5b610833915060203d602011610839575b61082b8183610a0b565b810190610a2d565b8461073e565b503d610821565b6040513d6000823e3d90fd5b82935060208091600193945181520193019101849261071b565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f696e636f727265637420626c6b566572696679496e666f0000000000000000006044820152606490fd5b6108da915060203d6020116108395761082b8183610a0b565b87610452565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b346100bb5760003660031901126100bb576020906001600160a01b03600254168152f35b6004359067ffffffffffffffff821682036100bb57565b9181601f840112156100bb5782359167ffffffffffffffff83116100bb57602083818601950101116100bb57565b600435906001600160a01b03821682036100bb57565b156109ab57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c0810190811067ffffffffffffffff82111761086657604052565b90601f8019910116810190811067ffffffffffffffff82111761086657604052565b908160209103126100bb575180151581036100bb5790565b60051b90611fe060e083169216820361051e57565b60ff166024019060ff821161051e5756fea264697066735822122093df16ca625454245c6df706e6a071d0dc912ab0eb5ad22fd0c78a29d9b86d7a64736f6c63430008120033",
  "deployedBytecode": "0x608080604052600436101561001357600080fd5b60003560e01c9081630215d01314610925575080630b885e531461032a5780631eeb86da146102ba578063715018a61461025d5780638da5cb5b14610236578063ec4ffc521461019e578063f2fde38b146100c05763f5cec6af1461007757600080fd5b346100bb5760203660031901126100bb5767ffffffffffffffff610099610949565b16600052600160205260206001600160a01b0360406000205416604051908152f35b600080fd5b346100bb5760203660031901126100bb576100d961098e565b600054906001600160a01b03808316916100f43384146109a4565b16918215610133576001600160a01b0319839116176000557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3005b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608490fd5b346100bb5760403660031901126100bb576101b7610949565b602435906001600160a01b03918281168091036100bb5767ffffffffffffffff60409261020a7ffd4bb2421fdcb098a8b68c19410f433a24b805b98f148eb28b7cc384b0a0e65f956000541633146109a4565b169081600052600160205282600020816001600160a01b031982541617905582519182526020820152a1005b346100bb5760003660031901126100bb5760206001600160a01b0360005416604051908152f35b346100bb5760003660031901126100bb57600080546001600160a01b03196001600160a01b038216916102913384146109a4565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b346100bb5760203660031901126100bb577f0addee9cb6aa9328bbfbe8282179a6737af344619320736b6918af70b6a94a9860206102f661098e565b6001600160a01b039061030e826000541633146109a4565b16806001600160a01b03196002541617600255604051908152a1005b346100bb5760603660031901126100bb57610343610949565b60243567ffffffffffffffff81116100bb57610363903690600401610960565b9160443567ffffffffffffffff81116100bb57610384903690600401610960565b929060405194610393866109ef565b6000865260006020870152600060408701526000606087015260006080870152600060a087015267ffffffffffffffff841660005260016020526001600160a01b0360406000205416156108e05767ffffffffffffffff841660005260016020526001600160a01b0360406000205416602060405180926322bb937360e11b82528260048301528460248301528487604484013760006044868401015281604481601f19601f89011681010301915afa908115610840576000916108c1575b50156100bb576040519360e0850185811067ffffffffffffffff8211176108665760405260e0368637610104860361087c57856020116100bb57856024116100bb5760005b60ff60068183161015610562576104b56104b083610a45565b610a5a565b9060018184160181811161051e576104d06104b08392610a45565b1680828416116100bb578981116100bb579181168681013592036020811061054a575b506007908316101561053457611fe08260051b1687015260ff80911690811461051e57600101610497565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60001960209190910360031b1b9091169060076104f3565b50508684868589610104116100bb5760e481013560c08301526040519560a0870187811067ffffffffffffffff8211176108665760405280610160116100bb5780610180116100bb5761017084013560801c61014085013560801b178752806101a0116100bb57806101c0116100bb576101b084013560801c61018085013560801b176020880152806101e0116100bb5780610200116100bb576101f084013560801c6101c085013560801b17604088015280610220116100bb5780610240116100bb5761023084013560801c61020085013560801b176060880152610260116100bb57906020839261025c60a095013560e01c608089015260405193610668856109ef565b67ffffffffffffffff8816855261025c81013560e01c8386015261014061017082013560801c91013560801b17604085015280356060850152013560e01c6080830152828201526001600160a01b036002541690604051928391631513dce960e21b835267ffffffffffffffff815116600484015263ffffffff6020820151166024840152604081015160448401526060810151606484015263ffffffff6080820151166084840152015160a482016000905b6007821061084c57505050610184816020935afa90811561084057600091610811575b50156107cc5760a063ffffffff91606060c09567ffffffffffffffff86168352805160408401526020810151602084015284608082015116848401526040810151828401520151608082015267ffffffffffffffff604051941684526020810151602085015260408101516040850152606081015160608501526080810151608085015201511660a0820152f35b60405162461bcd60e51b815260206004820152600f60248201527f696e76616c696420626c6b4861736800000000000000000000000000000000006044820152606490fd5b610833915060203d602011610839575b61082b8183610a0b565b810190610a2d565b8461073e565b503d610821565b6040513d6000823e3d90fd5b82935060208091600193945181520193019101849261071b565b634e487b7160e01b600052604160045260246000fd5b60405162461bcd60e51b815260206004820152601760248201527f696e636f727265637420626c6b566572696679496e666f0000000000000000006044820152606490fd5b6108da915060203d6020116108395761082b8183610a0b565b87610452565b60405162461bcd60e51b815260206004820152601660248201527f636861696e207665726966696572206e6f7420736574000000000000000000006044820152606490fd5b346100bb5760003660031901126100bb576020906001600160a01b03600254168152f35b6004359067ffffffffffffffff821682036100bb57565b9181601f840112156100bb5782359167ffffffffffffffff83116100bb57602083818601950101116100bb57565b600435906001600160a01b03821682036100bb57565b156109ab57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60c0810190811067ffffffffffffffff82111761086657604052565b90601f8019910116810190811067ffffffffffffffff82111761086657604052565b908160209103126100bb575180151581036100bb5790565b60051b90611fe060e083169216820361051e57565b60ff166024019060ff821161051e5756fea264697066735822122093df16ca625454245c6df706e6a071d0dc912ab0eb5ad22fd0c78a29d9b86d7a64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/verifiers/SlotValueVerifier.sol:SlotValueVerifier",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5043,
        "contract": "contracts/verifiers/SlotValueVerifier.sol:SlotValueVerifier",
        "label": "verifierAddresses",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint64,t_address)"
      },
      {
        "astId": 5045,
        "contract": "contracts/verifiers/SlotValueVerifier.sol:SlotValueVerifier",
        "label": "BlockChunks",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint64,t_address)": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}