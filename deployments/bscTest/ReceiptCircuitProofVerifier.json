{
  "address": "0xADf87124084685f3238ad20BF9A707fd71336D2e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "commit",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[6]",
          "name": "input",
          "type": "uint256[6]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "r",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "proofData",
          "type": "bytes"
        }
      ],
      "name": "verifyRaw",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc9fbf4ff5027f51f9b637337a97e9b3c99f29a7b8d9e37424dbac46c566277b1",
  "receipt": {
    "to": null,
    "from": "0x58b529F9084D7eAA598EB3477Fe36064C5B7bbC1",
    "contractAddress": "0xADf87124084685f3238ad20BF9A707fd71336D2e",
    "transactionIndex": 0,
    "gasUsed": "1231202",
    "logsBloom": "0x
    "blockHash": "0x6e5987df572a6f39b4147f6370c9772767715cbdd12219ac0ab1fb43d5db154c",
    "transactionHash": "0xc9fbf4ff5027f51f9b637337a97e9b3c99f29a7b8d9e37424dbac46c566277b1",
    "logs": [],
    "blockNumber": 31421892,
    "cumulativeGasUsed": "1231202",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "2c4506faf962a540c8e2d2bc35bafac2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"commit\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[6]\",\"name\":\"input\",\"type\":\"uint256[6]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"r\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"proofData\",\"type\":\"bytes\"}],\"name\":\"verifyRaw\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/verifiers/zk-verifiers/ReceiptCircuitProofVerifier.sol\":\"ReceiptCircuitProofVerifier\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"contracts/verifiers/zk-verifiers/ReceiptCircuitProofVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: AML\\n//\\n// Copyright 2017 Christian Reitwiessner\\n// Permission is hereby granted, free of charge, to any person obtaining a copy\\n// of this software and associated documentation files (the \\\"Software\\\"), to\\n// deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\\n// sell copies of the Software, and to permit persons to whom the Software is\\n// furnished to do so, subject to the following conditions:\\n// The above copyright notice and this permission notice shall be included in\\n// all copies or substantial portions of the Software.\\n// THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\\n// FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\\n// IN THE SOFTWARE.\\n\\n// 2019 OKIMS\\n\\npragma solidity ^0.8.0;\\n\\nlibrary Pairing {\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct G1Point {\\n        uint256 X;\\n        uint256 Y;\\n    }\\n\\n    // Encoding of field elements is: X[0] * z + X[1]\\n    struct G2Point {\\n        uint256[2] X;\\n        uint256[2] Y;\\n    }\\n\\n    /*\\n     * @return The negation of p, i.e. p.plus(p.negate()) should be zero.\\n     */\\n    function negate(G1Point memory p) internal pure returns (G1Point memory) {\\n        // The prime q in the base field F_q for G1\\n        if (p.X == 0 && p.Y == 0) {\\n            return G1Point(0, 0);\\n        } else {\\n            return G1Point(p.X, PRIME_Q - (p.Y % PRIME_Q));\\n        }\\n    }\\n\\n    /*\\n     * @return The sum of two points of G1\\n     */\\n    function plus(G1Point memory p1, G1Point memory p2) internal view returns (G1Point memory r) {\\n        uint256[4] memory input;\\n        input[0] = p1.X;\\n        input[1] = p1.Y;\\n        input[2] = p2.X;\\n        input[3] = p2.Y;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * Same as plus but accepts raw input instead of struct\\n     * @return The sum of two points of G1, one is represented as array\\n     */\\n    function plus_raw(uint256[4] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 6, input, 0xc0, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-add-failed\\\");\\n    }\\n\\n    /*\\n     * @return The product of a point on G1 and a scalar, i.e.\\n     *         p == p.scalar_mul(1) and p.plus(p) == p.scalar_mul(2) for all\\n     *         points p.\\n     */\\n    function scalar_mul(G1Point memory p, uint256 s) internal view returns (G1Point memory r) {\\n        uint256[3] memory input;\\n        input[0] = p.X;\\n        input[1] = p.Y;\\n        input[2] = s;\\n        bool success;\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /*\\n     * Same as scalar_mul but accepts raw input instead of struct,\\n     * Which avoid extra allocation. provided input can be allocated outside and re-used multiple times\\n     */\\n    function scalar_mul_raw(uint256[3] memory input, G1Point memory r) internal view {\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 7, input, 0x80, r, 0x60)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n        require(success, \\\"pairing-mul-failed\\\");\\n    }\\n\\n    /* @return The result of computing the pairing check\\n     *         e(p1[0], p2[0]) *  .... * e(p1[n], p2[n]) == 1\\n     *         For example,\\n     *         pairing([P1(), P1().negate()], [P2(), P2()]) should return true.\\n     */\\n    function pairing(\\n        G1Point memory a1,\\n        G2Point memory a2,\\n        G1Point memory b1,\\n        G2Point memory b2,\\n        G1Point memory c1,\\n        G2Point memory c2,\\n        G1Point memory d1,\\n        G2Point memory d2\\n    ) internal view returns (bool) {\\n        G1Point[4] memory p1 = [a1, b1, c1, d1];\\n        G2Point[4] memory p2 = [a2, b2, c2, d2];\\n        uint256 inputSize = 24;\\n        uint256[] memory input = new uint256[](inputSize);\\n\\n        for (uint256 i = 0; i < 4; i++) {\\n            uint256 j = i * 6;\\n            input[j + 0] = p1[i].X;\\n            input[j + 1] = p1[i].Y;\\n            input[j + 2] = p2[i].X[0];\\n            input[j + 3] = p2[i].X[1];\\n            input[j + 4] = p2[i].Y[0];\\n            input[j + 5] = p2[i].Y[1];\\n        }\\n\\n        uint256[1] memory out;\\n        bool success;\\n\\n        // solium-disable-next-line security/no-inline-assembly\\n        assembly {\\n            success := staticcall(sub(gas(), 2000), 8, add(input, 0x20), mul(inputSize, 0x20), out, 0x20)\\n            // Use \\\"invalid\\\" to make gas estimation work\\n            switch success\\n            case 0 {\\n                invalid()\\n            }\\n        }\\n\\n        require(success, \\\"pairing-opcode-failed\\\");\\n\\n        return out[0] != 0;\\n    }\\n}\\n\\ncontract ReceiptCircuitProofVerifier {\\n    using Pairing for *;\\n\\n    uint256 constant SNARK_SCALAR_FIELD = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    uint256 constant PRIME_Q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    struct VerifyingKey {\\n        Pairing.G1Point alfa1;\\n        Pairing.G2Point beta2;\\n        Pairing.G2Point gamma2;\\n        Pairing.G2Point delta2;\\n        // []G1Point IC (K in gnark) appears directly in verifyProof\\n    }\\n\\n    struct Proof {\\n        Pairing.G1Point A;\\n        Pairing.G2Point B;\\n        Pairing.G1Point C;\\n        Pairing.G1Point Commit;\\n    }\\n\\n    function verifyingKey() internal pure returns (VerifyingKey memory vk) {\\n        vk.alfa1 = Pairing.G1Point(\\n            uint256(9447183503998980339292850375577478371113947017857499583704309774591562880980),\\n            uint256(184199927197602977107803930476599395099840069416487060594900080765611519251)\\n        );\\n        vk.beta2 = Pairing.G2Point(\\n            [\\n                uint256(4425843375004160116480993644711794717449594147277981817829308319710125818246),\\n                uint256(4150213313403367202752011935766360197378283650393380092331147877555500592720)\\n            ],\\n            [\\n                uint256(2358468510311241025685251002392699058884200699464256206546448819531347354117),\\n                uint256(11030921960093958911362594763693200854719858836158767939608243593601399897651)\\n            ]\\n        );\\n        vk.gamma2 = Pairing.G2Point(\\n            [\\n                uint256(11504659940286117553991842087274362706942029996906610325629547003428511970826),\\n                uint256(21413455009764493385744980446141460716584050725324193217854900725461771468885)\\n            ],\\n            [\\n                uint256(18008421125611264427591496431482181754288643885129744647080726636689449336949),\\n                uint256(4229464456803781405930062772352892440489445462431955693587893195106254074177)\\n            ]\\n        );\\n        vk.delta2 = Pairing.G2Point(\\n            [\\n                uint256(10048385754963873737258584211902590481567961594624223797063914243990263205335),\\n                uint256(13761764694854097272100855427354431116680050524599418768970940424458336838511)\\n            ],\\n            [\\n                uint256(18317908082749303426102864343204248097029231585924755220762984717292588386163),\\n                uint256(19585478889656685018149300849489173654207722896444342966511854593289630185686)\\n            ]\\n        );\\n    }\\n\\n    // accumulate scalarMul(mul_input) into q\\n    // that is computes sets q = (mul_input[0:2] * mul_input[3]) + q\\n    function accumulate(\\n        uint256[3] memory mul_input,\\n        Pairing.G1Point memory p,\\n        uint256[4] memory buffer,\\n        Pairing.G1Point memory q\\n    ) internal view {\\n        // computes p = mul_input[0:2] * mul_input[3]\\n        Pairing.scalar_mul_raw(mul_input, p);\\n\\n        // point addition inputs\\n        buffer[0] = q.X;\\n        buffer[1] = q.Y;\\n        buffer[2] = p.X;\\n        buffer[3] = p.Y;\\n\\n        // q = p + q\\n        Pairing.plus_raw(buffer, q);\\n    }\\n\\n    /*\\n     * @returns Whether the proof is valid given the hardcoded verifying key\\n     *          above and the public inputs\\n     */\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[2] memory commit,\\n        uint256[6] memory input\\n    ) public view returns (bool r) {\\n        Proof memory proof;\\n        proof.A = Pairing.G1Point(a[0], a[1]);\\n        proof.B = Pairing.G2Point([b[0][0], b[0][1]], [b[1][0], b[1][1]]);\\n        proof.C = Pairing.G1Point(c[0], c[1]);\\n        proof.Commit = Pairing.G1Point(commit[0], commit[1]);\\n\\n        // Make sure that proof.A, B, and C are each less than the prime q\\n        require(proof.A.X < PRIME_Q, \\\"verifier-aX-gte-prime-q\\\");\\n        require(proof.A.Y < PRIME_Q, \\\"verifier-aY-gte-prime-q\\\");\\n\\n        require(proof.B.X[0] < PRIME_Q, \\\"verifier-bX0-gte-prime-q\\\");\\n        require(proof.B.Y[0] < PRIME_Q, \\\"verifier-bY0-gte-prime-q\\\");\\n\\n        require(proof.B.X[1] < PRIME_Q, \\\"verifier-bX1-gte-prime-q\\\");\\n        require(proof.B.Y[1] < PRIME_Q, \\\"verifier-bY1-gte-prime-q\\\");\\n\\n        require(proof.C.X < PRIME_Q, \\\"verifier-cX-gte-prime-q\\\");\\n        require(proof.C.Y < PRIME_Q, \\\"verifier-cY-gte-prime-q\\\");\\n\\n        // Make sure that every input is less than the snark scalar field\\n        for (uint256 i = 0; i < input.length; i++) {\\n            require(input[i] < SNARK_SCALAR_FIELD, \\\"verifier-gte-snark-scalar-field\\\");\\n        }\\n\\n        VerifyingKey memory vk = verifyingKey();\\n\\n        // Compute the linear combination vk_x\\n        Pairing.G1Point memory vk_x = Pairing.G1Point(0, 0);\\n\\n        // Buffer reused for addition p1 + p2 to avoid memory allocations\\n        // [0:2] -> p1.X, p1.Y ; [2:4] -> p2.X, p2.Y\\n        uint256[4] memory add_input;\\n\\n        // Buffer reused for multiplication p1 * s\\n        // [0:2] -> p1.X, p1.Y ; [3] -> s\\n        uint256[3] memory mul_input;\\n\\n        // temporary point to avoid extra allocations in accumulate\\n        Pairing.G1Point memory q = Pairing.G1Point(0, 0);\\n\\n        vk_x.X = uint256(11222902649456585819396374006075247707098646293539571630633339898854885018558); // vk.K[0].X\\n        vk_x.Y = uint256(12662486719784169074971558367354505232523182642582111225332980907021661264024); // vk.K[0].Y\\n        mul_input[0] = uint256(21065693238076091285504435587244309893054300638467697738681640400482785788350); // vk.K[1].X\\n        mul_input[1] = uint256(2415256270700166152173625479266721199788133969517844992705046377576592883210); // vk.K[1].Y\\n        mul_input[2] = input[0];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[1] * input[0]\\n        mul_input[0] = uint256(18096279537076609660320120211442705168430959987170149840916885805814715641632); // vk.K[2].X\\n        mul_input[1] = uint256(16672604117456582200022193620140850940005981691714304325450819935883857930402); // vk.K[2].Y\\n        mul_input[2] = input[1];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[2] * input[1]\\n        mul_input[0] = uint256(21558478737339269994373315144157455698966793403638434649664332724968933259229); // vk.K[3].X\\n        mul_input[1] = uint256(2415029675933244163594745637213440800861374633038118513359631411562752592493); // vk.K[3].Y\\n        mul_input[2] = input[2];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[3] * input[2]\\n        mul_input[0] = uint256(1147379097705720579395309137408780447342702646222674726371050509373486945748); // vk.K[4].X\\n        mul_input[1] = uint256(17102748586987266949864174661197964820712070881708935752071601070854808477438); // vk.K[4].Y\\n        mul_input[2] = input[3];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[4] * input[3]\\n        mul_input[0] = uint256(3103104678530231502876310346559960367621135223001435554775751324235014344577); // vk.K[5].X\\n        mul_input[1] = uint256(4427609946618648769965871464972578092163893331991549717119333659936226637905); // vk.K[5].Y\\n        mul_input[2] = input[4];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[5] * input[4]\\n        mul_input[0] = uint256(21362359223554669571499130639642990212921689193951946308229865958761771096569); // vk.K[6].X\\n        mul_input[1] = uint256(14129530912838178534199899953829384832192088435309446270101771046028642735092); // vk.K[6].Y\\n        mul_input[2] = input[5];\\n        accumulate(mul_input, q, add_input, vk_x); // vk_x += vk.K[6] * input[5]\\n        if (commit[0] != 0 || commit[1] != 0) {\\n            vk_x = Pairing.plus(vk_x, proof.Commit);\\n        }\\n\\n        return\\n            Pairing.pairing(Pairing.negate(proof.A), proof.B, vk.alfa1, vk.beta2, vk_x, vk.gamma2, proof.C, vk.delta2);\\n    }\\n\\n    function verifyRaw(bytes calldata proofData) external view returns (bool) {\\n        uint256[2] memory a;\\n        a[0] = uint256(bytes32(proofData[:32]));\\n        a[1] = uint256(bytes32(proofData[32:64]));\\n        uint256[2][2] memory b;\\n        b[0][0] = uint256(bytes32(proofData[64:96]));\\n        b[0][1] = uint256(bytes32(proofData[96:128]));\\n        b[1][0] = uint256(bytes32(proofData[128:160]));\\n        b[1][1] = uint256(bytes32(proofData[160:192]));\\n        uint256[2] memory c;\\n        c[0] = uint256(bytes32(proofData[192:224]));\\n        c[1] = uint256(bytes32(proofData[224:256]));\\n        uint256[2] memory commit;\\n        commit[0] = uint256(bytes32(proofData[256:288]));\\n        commit[1] = uint256(bytes32(proofData[288:320]));\\n        uint256[6] memory input;\\n        input[0] = uint256(bytes32(proofData[320:352]));\\n        input[1] = uint256(bytes32(proofData[352:384]));\\n        input[2] = uint256(bytes32(proofData[384:416]));\\n        input[3] = uint256(bytes32(proofData[416:448]));\\n        input[4] = uint256(bytes32(proofData[448:480]));\\n        input[5] = uint256(bytes32(proofData[480:512]));\\n\\n        return verifyProof(a, b, c, commit, input);\\n    }\\n}\\n\",\"keccak256\":\"0x17c65888d27a86fe0156ac45224f4f52b2539eb269da3e9f2dad7672878953ed\",\"license\":\"AML\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657611552908161001c8239f35b600080fdfe604060808152600436101561001357600080fd5b600090813560e01c9182633e6eeee51461003d57505063457726e61461003857600080fd5b610299565b346100db576102003660031901126100db5761005836610159565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019b565b61009d366101d9565b916100a736610259565b93610704565b905190151581529081906020820190565b0390f35b602086916100d03685610219565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b6040519060c0820182811067ffffffffffffffff82111761011457604052565b80602312156101965761016a6100f4565b90816044918211610196576004905b8282106101865750505090565b8135815260209182019101610179565b600080fd5b8060e31215610196576101ac6100f4565b90816101049182116101965760c4905b8282106101c95750505090565b81358152602091820191016101bc565b806101231215610196576101eb6100f4565b908161014491821161019657610104905b8282106102095750505090565b81358152602091820191016101fc565b9080601f830112156101965761022d6100f4565b80926040810192831161019657905b8282106102495750505090565b813581526020918201910161023c565b8061016312156101965761026b610139565b908161020491821161019657610144905b8282106102895750505090565b813581526020918201910161027c565b346101965760203660031901126101965767ffffffffffffffff6004358181116101965736602382011215610196578060040135918211610196573660248383010111610196576100be9160246102f092016113c7565b60405190151581529081906020820190565b61030a610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103646100f4565b906040368337565b610374610139565b9060c0368337565b6103846100f4565b9061038d6100f4565b6040368237825261039c6100f4565b60403682376020830152565b6103b0610119565b906103b96100f4565b60009081815281602082015283526103cf61037c565b60208401526103dc6100f4565b81815281602082015260408401526103f26100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561041f57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046b57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b757565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050357565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561054f57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059b57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e757565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063357565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069d5760010190565b610678565b9060068110156106b35760051b0190565b610402565b156106bf57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107136103a8565b81516020809301516107236100f4565b9182528382015281526107346100f4565b948051518652610745815160200190565b5183870152610764836107566100f4565b920180515183525160200190565b51838201526107716100f4565b9586528286015281810194855281835193015161078c6100f4565b93845282840152604081019283528351938281019485516107ab6100f4565b918252848201526060830190815261085f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ea8186515110610418565b6107f981878751015110610464565b610807818a515151106104b0565b61081781878b51015151106104fc565b61082e816108278b515160200190565b5110610548565b61084781610840888c51015160200190565b5110610594565b61085481885151106105e0565b85875101511061062c565b60005b60068110610b74575090610b4d979893929161087c610f90565b966108856100f4565b9260008452610b14848781019860008a5281996108a0610302565b918a60a06108ac610312565b927f1bfeb6a83d7e8dc5cec4dd0e2c2d4aa0baefbd27c2898777f954af63b71e58986108d66100f4565b95600087526000858801527f18cff0135bfb6de289009283758f4ec87796ffffcc7a51210954b999bfffcbbe8952527f2e92c285458bae1e99d9a9200376936e9bc433c4fa09a7fd592b9ea6bdb381be84527f1f3d07f5aea986e1c19d549a408fc7ab3bbbea65d3211aa6fda395d63fedd3f48385017f0556fc9225cdf9ef9ac9243f7cc4e3881b77d1d65b88a20f1360f8b53cc0be0a8152825194604087019586526109858a8a8a8a61120b565b7f28022199a2848916c27e22c727d03f3e6ac4925fa9f4a1cacac0c402f1e9ef2087527f24dc5c09678af0d1978e4eadafe7d9c458416b4117fe411184e3155276daa8a2825283015185526109dc8989898961120b565b7f2fa9aaa351ed5d44df3e3a0a4bbeb106c129988a279f3bc0816e77f61e2b77dd86527f0556dbbd47d82e0b449e72b7c3be09123a9f9908c53601cb93a1b92252cd4a6d815260408301518552610a358989898961120b565b7f028964c010555b14c1b97c0899a7b57afbec0657f69bebe40779015f723055d486527f25cfd00a866f6d93299ad776832317b77ebd20443fa175feb9e37e8e4b6f1efe815260608301518552610a8e8989898961120b565b7f06dc4b85992b01bdac07b22e946f5a19cd2d575cda82f0bc98659a25fc280f8186527f09c9f03c77ead489a40c0da7a068217a90bc6ea0c8ed6ef26a9fc0f8292d7851815260808301518552610ae78989898961120b565b7f2f3aaab64085228c400bf1d79266d98fa16281d1afd861facd36e81f8074d9f98652520151905261120b565b511590811591610b69575b50610b50575b5050610b319051610bb7565b9451908451908501519160606040870151955196015196610dea565b90565b51919350610b3191610b6191610c9e565b929038610b25565b905051151538610b1f565b80610bad7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ba6610bb2948e6106a2565b51106106b8565b61068e565b610862565b60006020610bc36100f4565b8281520152805190811580610c35575b15610bf0575050610be26100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069d57610c2a6100f4565b918252602082015290565b50602081015115610bd3565b9060048110156106b35760051b0190565b15610c5957565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0610cae6100f4565b9160008352600060208401526020839681610cc7610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610cfe57610cfc90610c52565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069d57565b906001820180921161069d57565b906002820180921161069d57565b906003820180921161069d57565b906004820180921161069d57565b906005820180921161069d57565b80518210156106b35760209160051b010190565b15610da557565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396610dfa610119565b95865260209788978888015260408701526060860152610e18610119565b9384528584015260408301526060820152610e31610d00565b9160005b60048110610e6d57505050610300610e4b610337565b9384920160086107cf195a01fa8015610cfe57610e6790610d9e565b51151590565b610f3f9192939450610e7e81610d2e565b610e888285610c41565b5151610e948288610d8a565b5286610ea08386610c41565b510151610eb5610eaf83610d44565b88610d8a565b52610ec08286610c41565b515151610ecf610eaf83610d52565b52610ee5610edd8387610c41565b515160200190565b51610ef2610eaf83610d60565b5286610efe8387610c41565b51015151610f0e610eaf83610d6e565b52610f39610f33610f2c89610f23868a610c41565b51015160200190565b5192610d7c565b87610d8a565b5261068e565b9084939291610e35565b610f51610119565b90610f5a6100f4565b60008152600060208201528252610f6f61037c565b6020830152610f7c61037c565b6040830152610f8961037c565b6060830152565b610f98610f49565b90610fa16100f4565b7f14e2ea9798d8c4e5bd2de83584f33abbb9e7ad1372382ce32452f13596ec17d481526020907e6840e3077807561ede92fe7eb75d6c053a4b7c18f7d30df6c46c9419f7ad13828201528352610ff56100f4565b7f09c8f046af7964aa921a8a62d3349811dcdf7f8cc4add179dd4f462cd7c1018681527f092cefff7cc6a2797032f899262da2fc9a790cb4d305902792cba06f81a9ae50828201526110456100f4565b7f0536d88b0be6ce0d7cfbabce72cd6bf4320bce4cb3d5d70fe01b8a12c63f620581527f186347d3d242fbc34ccfb0dcd702e61a90f1cf5c57b2f0d218f17985b25fbe33838201526110956100f4565b91825282820152818401526110a86100f4565b7f196f68221eea6bfaa3ab73748c801170afcb4f7f7f4b3dd1e00f777ff334760a81527f2f5796064bff90924b5181e362e80320a8a70763cf687804deb0c42a6341c055828201526110f86100f4565b7f27d067b80869e7b362d29f82caa59bb368f4bf48d3380ddd077550ac2104c07581527f0959cac3c5dd0ca6fdd7fa387f67bdfb34df6ab6a36a5da27e608a7fabd03141838201526111486100f4565b91825282820152604084015261115c6100f4565b907f16372f4e77c984e42d184cb4e2a48c2315fd12ea3114519ccac5efc43e688dd782527f1e6ce1fe81314803ea7fc21cdf026b672ee05a44ffe4a6b89df0e3d6cc29a36f818301526111ad6100f4565b907f287f918d4858d5007f5bc0382b25a3748fab3d59f97ed17ffd37ce3e1112477382527f2b4cfcfb9de22a168330cfa032e7de4990b7289ffaac056139027b6e5632f8d6818301526111fe6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa15610cfe57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015610cfe57610cfc90610c52565b906020116101965790602090565b906040116101965760200190602090565b906060116101965760400190602090565b906080116101965760600190602090565b9060a0116101965760800190602090565b9060c0116101965760a00190602090565b9060e0116101965760c00190602090565b90610100116101965760e00190602090565b9061012011610196576101000190602090565b9061014011610196576101200190602090565b9061016011610196576101400190602090565b9061018011610196576101600190602090565b906101a011610196576101800190602090565b906101c011610196576101a00190602090565b906101e011610196576101c00190602090565b9061020011610196576101e00190602090565b359060208110611384575090565b6000199060200360031b1b1690565b61139b6100f4565b9060005b604090818110156113c3576020916113b56100f4565b90368237818501520161139f565b5050565b610b4d916113d361035c565b6113e66113e08385611258565b90611376565b81526113f56113e08385611266565b6020820152611402611393565b61140f6113e08486611277565b81515261141f6113e08486611288565b8151602001526114326113e08486611299565b602082019081515261145261144a6113e086886112aa565b915160200190565b5261145b61035c565b916114696113e085876112bb565b83526114786113e085876112cc565b60208401526115126113e061148b61035c565b956114996113e0828a6112de565b87526114a86113e0828a6112f1565b60208801526114b561036c565b976114c36113e08383611304565b89526114d26113e08383611317565b60208a01526114e46113e0838361132a565b60408a01526114f66113e0838361133d565b60608a01526115086113e08383611350565b60808a0152611363565b60a086015261070456fea2646970667358221220a789d1a19cdd123b73b4d82a171ac16cf1d7a33bf60c05c76c5268e0542d5f1c64736f6c63430008120033",
  "deployedBytecode": "0x604060808152600436101561001357600080fd5b600090813560e01c9182633e6eeee51461003d57505063457726e61461003857600080fd5b610299565b346100db576102003660031901126100db5761005836610159565b9036606312156100db5761006a6100f4565b908160c4913683116100db57506044905b8282106100c2576100be866100ad87876100943661019b565b61009d366101d9565b916100a736610259565b93610704565b905190151581529081906020820190565b0390f35b602086916100d03685610219565b81520191019061007b565b80fd5b634e487b7160e01b600052604160045260246000fd5b604051906040820182811067ffffffffffffffff82111761011457604052565b6100de565b604051906080820182811067ffffffffffffffff82111761011457604052565b6040519060c0820182811067ffffffffffffffff82111761011457604052565b80602312156101965761016a6100f4565b90816044918211610196576004905b8282106101865750505090565b8135815260209182019101610179565b600080fd5b8060e31215610196576101ac6100f4565b90816101049182116101965760c4905b8282106101c95750505090565b81358152602091820191016101bc565b806101231215610196576101eb6100f4565b908161014491821161019657610104905b8282106102095750505090565b81358152602091820191016101fc565b9080601f830112156101965761022d6100f4565b80926040810192831161019657905b8282106102495750505090565b813581526020918201910161023c565b8061016312156101965761026b610139565b908161020491821161019657610144905b8282106102895750505090565b813581526020918201910161027c565b346101965760203660031901126101965767ffffffffffffffff6004358181116101965736602382011215610196578060040135918211610196573660248383010111610196576100be9160246102f092016113c7565b60405190151581529081906020820190565b61030a610119565b906080368337565b604051906060820182811067ffffffffffffffff821117610114576040526060368337565b604051906020820182811067ffffffffffffffff821117610114576040526020368337565b6103646100f4565b906040368337565b610374610139565b9060c0368337565b6103846100f4565b9061038d6100f4565b6040368237825261039c6100f4565b60403682376020830152565b6103b0610119565b906103b96100f4565b60009081815281602082015283526103cf61037c565b60208401526103dc6100f4565b81815281602082015260408401526103f26100f4565b9080825260208201526060830152565b634e487b7160e01b600052603260045260246000fd5b1561041f57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561046b57565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d61592d6774652d7072696d652d710000000000000000006044820152606490fd5b156104b757565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561050357565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259302d6774652d7072696d652d7100000000000000006044820152606490fd5b1561054f57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6258312d6774652d7072696d652d7100000000000000006044820152606490fd5b1561059b57565b60405162461bcd60e51b815260206004820152601860248201527f76657269666965722d6259312d6774652d7072696d652d7100000000000000006044820152606490fd5b156105e757565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63582d6774652d7072696d652d710000000000000000006044820152606490fd5b1561063357565b60405162461bcd60e51b815260206004820152601760248201527f76657269666965722d63592d6774652d7072696d652d710000000000000000006044820152606490fd5b634e487b7160e01b600052601160045260246000fd5b600019811461069d5760010190565b610678565b9060068110156106b35760051b0190565b610402565b156106bf57565b60405162461bcd60e51b815260206004820152601f60248201527f76657269666965722d6774652d736e61726b2d7363616c61722d6669656c64006044820152606490fd5b949394929190926107136103a8565b81516020809301516107236100f4565b9182528382015281526107346100f4565b948051518652610745815160200190565b5183870152610764836107566100f4565b920180515183525160200190565b51838201526107716100f4565b9586528286015281810194855281835193015161078c6100f4565b93845282840152604081019283528351938281019485516107ab6100f4565b918252848201526060830190815261085f7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476107ea8186515110610418565b6107f981878751015110610464565b610807818a515151106104b0565b61081781878b51015151106104fc565b61082e816108278b515160200190565b5110610548565b61084781610840888c51015160200190565b5110610594565b61085481885151106105e0565b85875101511061062c565b60005b60068110610b74575090610b4d979893929161087c610f90565b966108856100f4565b9260008452610b14848781019860008a5281996108a0610302565b918a60a06108ac610312565b927f1bfeb6a83d7e8dc5cec4dd0e2c2d4aa0baefbd27c2898777f954af63b71e58986108d66100f4565b95600087526000858801527f18cff0135bfb6de289009283758f4ec87796ffffcc7a51210954b999bfffcbbe8952527f2e92c285458bae1e99d9a9200376936e9bc433c4fa09a7fd592b9ea6bdb381be84527f1f3d07f5aea986e1c19d549a408fc7ab3bbbea65d3211aa6fda395d63fedd3f48385017f0556fc9225cdf9ef9ac9243f7cc4e3881b77d1d65b88a20f1360f8b53cc0be0a8152825194604087019586526109858a8a8a8a61120b565b7f28022199a2848916c27e22c727d03f3e6ac4925fa9f4a1cacac0c402f1e9ef2087527f24dc5c09678af0d1978e4eadafe7d9c458416b4117fe411184e3155276daa8a2825283015185526109dc8989898961120b565b7f2fa9aaa351ed5d44df3e3a0a4bbeb106c129988a279f3bc0816e77f61e2b77dd86527f0556dbbd47d82e0b449e72b7c3be09123a9f9908c53601cb93a1b92252cd4a6d815260408301518552610a358989898961120b565b7f028964c010555b14c1b97c0899a7b57afbec0657f69bebe40779015f723055d486527f25cfd00a866f6d93299ad776832317b77ebd20443fa175feb9e37e8e4b6f1efe815260608301518552610a8e8989898961120b565b7f06dc4b85992b01bdac07b22e946f5a19cd2d575cda82f0bc98659a25fc280f8186527f09c9f03c77ead489a40c0da7a068217a90bc6ea0c8ed6ef26a9fc0f8292d7851815260808301518552610ae78989898961120b565b7f2f3aaab64085228c400bf1d79266d98fa16281d1afd861facd36e81f8074d9f98652520151905261120b565b511590811591610b69575b50610b50575b5050610b319051610bb7565b9451908451908501519160606040870151955196015196610dea565b90565b51919350610b3191610b6191610c9e565b929038610b25565b905051151538610b1f565b80610bad7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001610ba6610bb2948e6106a2565b51106106b8565b61068e565b610862565b60006020610bc36100f4565b8281520152805190811580610c35575b15610bf0575050610be26100f4565b600081526000602082015290565b602001517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790819006810390811161069d57610c2a6100f4565b918252602082015290565b50602081015115610bd3565b9060048110156106b35760051b0190565b15610c5957565b60405162461bcd60e51b815260206004820152601260248201527f70616972696e672d6164642d6661696c656400000000000000000000000000006044820152606490fd5b60609092919260c0610cae6100f4565b9160008352600060208401526020839681610cc7610119565b936080368637805185520151828401528051604084015201518482015260066107cf195a01fa8015610cfe57610cfc90610c52565b565bfe5b60405190610320820182811067ffffffffffffffff8211176101145760405260188252610300366020840137565b9060068202918083046006149015171561069d57565b906001820180921161069d57565b906002820180921161069d57565b906003820180921161069d57565b906004820180921161069d57565b906005820180921161069d57565b80518210156106b35760209160051b010190565b15610da557565b60405162461bcd60e51b815260206004820152601560248201527f70616972696e672d6f70636f64652d6661696c656400000000000000000000006044820152606490fd5b9491959692909396610dfa610119565b95865260209788978888015260408701526060860152610e18610119565b9384528584015260408301526060820152610e31610d00565b9160005b60048110610e6d57505050610300610e4b610337565b9384920160086107cf195a01fa8015610cfe57610e6790610d9e565b51151590565b610f3f9192939450610e7e81610d2e565b610e888285610c41565b5151610e948288610d8a565b5286610ea08386610c41565b510151610eb5610eaf83610d44565b88610d8a565b52610ec08286610c41565b515151610ecf610eaf83610d52565b52610ee5610edd8387610c41565b515160200190565b51610ef2610eaf83610d60565b5286610efe8387610c41565b51015151610f0e610eaf83610d6e565b52610f39610f33610f2c89610f23868a610c41565b51015160200190565b5192610d7c565b87610d8a565b5261068e565b9084939291610e35565b610f51610119565b90610f5a6100f4565b60008152600060208201528252610f6f61037c565b6020830152610f7c61037c565b6040830152610f8961037c565b6060830152565b610f98610f49565b90610fa16100f4565b7f14e2ea9798d8c4e5bd2de83584f33abbb9e7ad1372382ce32452f13596ec17d481526020907e6840e3077807561ede92fe7eb75d6c053a4b7c18f7d30df6c46c9419f7ad13828201528352610ff56100f4565b7f09c8f046af7964aa921a8a62d3349811dcdf7f8cc4add179dd4f462cd7c1018681527f092cefff7cc6a2797032f899262da2fc9a790cb4d305902792cba06f81a9ae50828201526110456100f4565b7f0536d88b0be6ce0d7cfbabce72cd6bf4320bce4cb3d5d70fe01b8a12c63f620581527f186347d3d242fbc34ccfb0dcd702e61a90f1cf5c57b2f0d218f17985b25fbe33838201526110956100f4565b91825282820152818401526110a86100f4565b7f196f68221eea6bfaa3ab73748c801170afcb4f7f7f4b3dd1e00f777ff334760a81527f2f5796064bff90924b5181e362e80320a8a70763cf687804deb0c42a6341c055828201526110f86100f4565b7f27d067b80869e7b362d29f82caa59bb368f4bf48d3380ddd077550ac2104c07581527f0959cac3c5dd0ca6fdd7fa387f67bdfb34df6ab6a36a5da27e608a7fabd03141838201526111486100f4565b91825282820152604084015261115c6100f4565b907f16372f4e77c984e42d184cb4e2a48c2315fd12ea3114519ccac5efc43e688dd782527f1e6ce1fe81314803ea7fc21cdf026b672ee05a44ffe4a6b89df0e3d6cc29a36f818301526111ad6100f4565b907f287f918d4858d5007f5bc0382b25a3748fab3d59f97ed17ffd37ce3e1112477382527f2b4cfcfb9de22a168330cfa032e7de4990b7289ffaac056139027b6e5632f8d6818301526111fe6100f4565b9283528201526060830152565b90929160608460806107cf19946007865a01fa15610cfe57600660c0926020606096865185528187015182860152805160408601520151868401525a01fa8015610cfe57610cfc90610c52565b906020116101965790602090565b906040116101965760200190602090565b906060116101965760400190602090565b906080116101965760600190602090565b9060a0116101965760800190602090565b9060c0116101965760a00190602090565b9060e0116101965760c00190602090565b90610100116101965760e00190602090565b9061012011610196576101000190602090565b9061014011610196576101200190602090565b9061016011610196576101400190602090565b9061018011610196576101600190602090565b906101a011610196576101800190602090565b906101c011610196576101a00190602090565b906101e011610196576101c00190602090565b9061020011610196576101e00190602090565b359060208110611384575090565b6000199060200360031b1b1690565b61139b6100f4565b9060005b604090818110156113c3576020916113b56100f4565b90368237818501520161139f565b5050565b610b4d916113d361035c565b6113e66113e08385611258565b90611376565b81526113f56113e08385611266565b6020820152611402611393565b61140f6113e08486611277565b81515261141f6113e08486611288565b8151602001526114326113e08486611299565b602082019081515261145261144a6113e086886112aa565b915160200190565b5261145b61035c565b916114696113e085876112bb565b83526114786113e085876112cc565b60208401526115126113e061148b61035c565b956114996113e0828a6112de565b87526114a86113e0828a6112f1565b60208801526114b561036c565b976114c36113e08383611304565b89526114d26113e08383611317565b60208a01526114e46113e0838361132a565b60408a01526114f66113e0838361133d565b60608a01526115086113e08383611350565b60808a0152611363565b60a086015261070456fea2646970667358221220a789d1a19cdd123b73b4d82a171ac16cf1d7a33bf60c05c76c5268e0542d5f1c64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}