{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/apps/receipt-demo/SingleEvent.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract SingleEvent {\n\n    event SendNumber(\n        address from,\n        uint256 number\n    );\n\n    function emitNumber(uint256 number) external {\n        emit SendNumber(msg.sender, number);\n    }\n}"
    },
    "contracts/apps/receipt-demo/VerifyEmitNumber.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"../../verifiers/interfaces/IReceiptVerifier.sol\";\nimport {BytesLib} from \"solidity-bytes-utils/contracts/BytesLib.sol\";\n\ncontract VerifyEmitNumber is Ownable {\n    IReceiptVerifier public receiptVerifier;\n\n    event VerifiedNumber(uint64 chainId, uint64 blknum, address from, uint256 number);\n\n    constructor(IReceiptVerifier _receiptVerifier) {\n        receiptVerifier = _receiptVerifier;\n    }\n\n    mapping(uint64 => address) public srcContract;\n\n    bytes32 private logTopic = keccak256(bytes(\"SendNumber(address,uint256)\"));\n\n    function submitNumberReceiptProof(\n        bytes calldata _receipt,\n        bytes calldata _proof,\n        bytes calldata _auxiBlkVerifyInfo) external {\n        IReceiptVerifier.ReceiptInfo memory receiptInfo = receiptVerifier.verifyReceiptAndLog(_receipt, _proof, _auxiBlkVerifyInfo);\n        // status must be 1\n        require(bytes1(receiptInfo.status) == 0x01, \"receipt status is fail\");\n        address sc = srcContract[receiptInfo.chainId];\n        bool findLog;\n        address from;\n        uint256 number;\n\n        // loop to get the target event\n        // TODO, for developer, log index can be a arg, avoid useless for loop\n        for (uint256 i = 0; i < receiptInfo.logs.length; i++) {\n            if (receiptInfo.logs[i].addr == sc && receiptInfo.logs[i].topics[0] == logTopic) {\n                from = address(bytes20(BytesLib.slice(receiptInfo.logs[i].data, 12, 32)));\n                number = uint256(bytes32(BytesLib.slice(receiptInfo.logs[i].data, 32, 64)));\n                findLog = true;\n                break;\n            }\n        }\n        require(findLog == true, \"fail to find the event log\");\n        emit VerifiedNumber(receiptInfo.chainId, receiptInfo.blkNum, from, number);\n    }\n\n    function setReceiptVerifier(IReceiptVerifier _receiptVerifier) external onlyOwner {\n        receiptVerifier = _receiptVerifier;\n    }\n\n    function setSrcContract(uint64 _chainId, address _contract) external onlyOwner {\n        srcContract[_chainId] = _contract;\n    }\n}"
    },
    "contracts/apps/slot-value-demo/MsgProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../verifiers/interfaces/ISlotValueVerifier.sol\";\n\n// source chain contract\ncontract MsgSender {\n    uint64 public nonce; // slot 0\n    mapping(uint64 => bytes32) public sent; // slot 1, nonce -> msgHash\n    event MsgSent(uint64 nonce, address sender, bytes msg);\n\n    function sendMsg(bytes calldata _msg) external {\n        bytes32 msgHash = keccak256(abi.encodePacked(msg.sender, _msg));\n        sent[nonce] = msgHash; // store in slot keccak256(abi.encode(_nonce, 1))\n        emit MsgSent(nonce++, msg.sender, _msg);\n    }\n}\n\n// destination chain contract\ncontract MsgReceiver {\n    uint64 public senderChainId;\n    bytes32 public senderContractHash;\n    ISlotValueVerifier public slotValueVerifier;\n\n    event MsgReceived(uint64 nonce, address sender, bytes msg);\n\n    constructor(ISlotValueVerifier _verifier, uint64 _senderChainId, address _senderContract) {\n        slotValueVerifier = _verifier;\n        senderChainId = _senderChainId;\n        senderContractHash = keccak256(abi.encodePacked(_senderContract));\n    }\n\n    function recvMsg(\n        uint64 _nonce,\n        address _sender,\n        bytes calldata _msg,\n        bytes calldata _proofData,\n        bytes calldata _blkVerifyInfo\n    ) external {\n        // compute expected slot and msg hash, sender map slot is 1\n        bytes32 slotKeyHash = keccak256(abi.encode(keccak256(abi.encode(_nonce, 1))));\n        bytes32 msgHash = keccak256(abi.encodePacked(_sender, _msg));\n        // retrieve zk verified slot info\n        ISlotValueVerifier.SlotInfo memory slotInfo = slotValueVerifier.verifySlotValue(\n            senderChainId,\n            _proofData,\n            _blkVerifyInfo\n        );\n        // compare expected and verified values\n        require(slotInfo.slotKeyHash == slotKeyHash, \"slot key not match\");\n        require(slotInfo.slotValue == msgHash, \"slot value not match\");\n        require(slotInfo.addrHash == senderContractHash, \"sender contract not match\");\n        emit MsgReceived(_nonce, _sender, _msg);\n    }\n}\n"
    },
    "contracts/apps/slot-value-demo/SlotValue.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../../verifiers/interfaces/ISlotValueVerifier.sol\";\n\ncontract SlotValue {\n    ISlotValueVerifier public slotValueVerifier;\n\n    event VerifiedSlotValueProof(\n        uint64 chainId,\n        bytes32 addrHash,\n        bytes32 slotKeyHash,\n        bytes32 slotValue,\n        uint32 blkNum,\n        bytes32 blkHash\n    );\n\n    constructor(ISlotValueVerifier _verifier) {\n        slotValueVerifier = _verifier;\n    }\n\n    function submitSlotValuePoof(uint64 chainId, bytes calldata proofData, bytes calldata blkVerifyInfo) external {\n        ISlotValueVerifier.SlotInfo memory slotInfo = slotValueVerifier.verifySlotValue(\n            chainId,\n            proofData,\n            blkVerifyInfo\n        );\n        emit VerifiedSlotValueProof(\n            slotInfo.chainId,\n            slotInfo.addrHash,\n            slotInfo.slotKeyHash,\n            slotInfo.slotValue,\n            slotInfo.blkNum,\n            slotInfo.blkHash\n        );\n    }\n}\n"
    },
    "contracts/chunk-sync/interfaces/IBlockChunks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IBlockChunks {\n    // historicalRoots(chainId, startBlockNumber) is 0 unless (startBlockNumber % 128 == 0)\n    // historicalRoots(chainId, startBlockNumber) holds the hash of\n    //   prevHash || root || numFinal\n    // where\n    // - prevHash is the parent hash of block startBlockNumber\n    // - root is the partial Merkle root of blockhashes of block numbers\n    //   [startBlockNumber, startBlockNumber + 128)\n    //   where unconfirmed block hashes are 0's\n    // - numFinal is the number of confirmed consecutive roots in [startBlockNumber, startBlockNumber + 128)\n    function historicalRoots(uint64 chainId, uint32 startBlockNumber) external view returns (bytes32);\n\n    event UpdateEvent(uint64 chainId, uint32 startBlockNumber, bytes32 prevHash, bytes32 root, uint32 numFinal);\n\n    struct BlockHashWitness {\n        uint64 chainId;\n        uint32 blkNum;\n        bytes32 claimedBlkHash;\n        bytes32 prevHash;\n        uint32 numFinal;\n        bytes32[7] merkleProof;\n    }\n\n    // update blocks in the \"backward\" direction, anchoring on a \"recent\" end blockhash from anchor contract\n    // * startBlockNumber must be a multiple of 128\n    // * for now always endBlockNumber = startBlockNumber + 127 (full update on every 128 blocks chunk)\n    function updateRecent(uint64 chainId, bytes calldata proofData) external;\n\n    // update older blocks in \"backwards\" direction, anchoring on more recent trusted blockhash\n    // must be batch of 128 blocks\n    function updateOld(uint64 chainId, bytes32 nextRoot, uint32 nextNumFinal, bytes calldata proofData) external;\n\n    function isBlockHashValid(BlockHashWitness calldata witness) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IEthereumLightClient.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IEthereumLightClient {\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot);\n}\n"
    },
    "contracts/message-bridge/interfaces/IMessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.18;\n\nimport \"../../interfaces/IEthereumLightClient.sol\";\n\ninterface IMessageBridge {\n    enum MessageStatus {\n        Null,\n        Success,\n        Fail\n    }\n\n    event MessageSent(\n        bytes32 indexed messageId,\n        uint256 indexed nonce,\n        uint64 dstChainId,\n        address sender,\n        address receiver,\n        bytes message\n    );\n    event MessageExecuted(\n        bytes32 indexed messageId,\n        uint256 indexed nonce,\n        uint64 srcChainId,\n        address sender,\n        address receiver,\n        bytes message,\n        bool success\n    );\n    event MessageCallReverted(bytes32 messageId, string reason); // help debug\n\n    function lightClients(uint256 chainId) external view returns (IEthereumLightClient);\n\n    function sendMessage(uint64 dstChainId, address receiver, bytes calldata message) external returns (bytes32);\n\n    function executeMessage(\n        uint64 srcChainId,\n        uint64 nonce,\n        address sender,\n        address receiver,\n        bytes calldata message,\n        bytes[] calldata accountProof,\n        bytes[] calldata storageProof\n    ) external returns (bool);\n\n    function getExecutionStateRootAndSlot(uint64 chainId) external view returns (bytes32 root, uint64 slot);\n}\n"
    },
    "contracts/message-bridge/interfaces/IMessageReceiverApp.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IMessageReceiverApp {\n    /**\n     * @notice Called by MessageBridge to execute a message\n     * @param _srcChainId The source chain ID where the message is originated from\n     * @param _sender The address of the source app contract\n     * @param _message Arbitrary message bytes originated from and encoded by the source app contract\n     * @param _executor Address who called the MessageBridge execution function\n     */\n    function executeMessage(\n        uint64 _srcChainId,\n        address _sender,\n        bytes calldata _message,\n        address _executor\n    ) external returns (bool);\n}\n"
    },
    "contracts/message-bridge/libraries/MerkleProofTree.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.18;\n\nimport \"./RLPReader.sol\";\n\nlibrary MerkleProofTree {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n\n    function _gnaw(uint256 index, bytes32 key) private pure returns (uint256 gnaw) {\n        assembly {\n            gnaw := shr(mul(sub(63, index), 4), key)\n        }\n        return gnaw % 16;\n    }\n\n    function _pathLength(bytes memory path) private pure returns (uint256, bool) {\n        uint256 gnaw = uint256(uint8(path[0])) / 16;\n        return ((path.length - 1) * 2 + (gnaw % 2), gnaw > 1);\n    }\n\n    function read(bytes32 key, bytes[] memory proof) internal pure returns (bytes memory result) {\n        bytes32 root;\n        bytes memory node = proof[0];\n\n        uint256 index = 0;\n        uint256 pathLength = 0;\n\n        while (true) {\n            RLPReader.RLPItem[] memory items = node.toRlpItem().toList();\n            if (items.length == 17) {\n                uint256 gnaw = _gnaw(pathLength++, key);\n                root = bytes32(items[gnaw].toUint());\n            } else {\n                require(items.length == 2, \"MessageBridge: Iinvalid RLP list length\");\n                (uint256 nodePathLength, bool isLeaf) = _pathLength(items[0].toBytes());\n                pathLength += nodePathLength;\n                if (isLeaf) {\n                    return items[1].toBytes();\n                } else {\n                    root = bytes32(items[1].toUint());\n                }\n            }\n\n            node = proof[++index];\n            require(root == keccak256(node), \"MessageBridge: node hash mismatched\");\n        }\n    }\n\n    function restoreMerkleRoot(bytes32 leaf, uint256 index, bytes32[] memory proof) internal pure returns (bytes32) {\n        bytes32 value = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            if ((index / (2 ** i)) % 2 == 1) {\n                value = sha256(bytes.concat(proof[i], value));\n            } else {\n                value = sha256(bytes.concat(value, proof[i]));\n            }\n        }\n        return value;\n    }\n}\n"
    },
    "contracts/message-bridge/libraries/MsgLib.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-only\n\npragma solidity >=0.8.0;\n\nlibrary MsgLib {\n    string constant ABORT_PREFIX = \"MSG::ABORT:\";\n\n    function computeMessageId(\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        uint64 _srcChainId,\n        uint64 _dstChainId,\n        bytes calldata _message\n    ) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_nonce, _sender, _receiver, _srcChainId, _dstChainId, _message));\n    }\n\n    // https://ethereum.stackexchange.com/a/83577\n    // https://github.com/Uniswap/v3-periphery/blob/v1.0.0/contracts/base/Multicall.sol\n    function getRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        // If the _res length is less than 68, then the transaction failed silently (without a revert message)\n        if (_returnData.length < 68) return \"Transaction reverted silently\";\n        assembly {\n            // Slice the sighash.\n            _returnData := add(_returnData, 0x04)\n        }\n        return abi.decode(_returnData, (string)); // All that remains is the revert string\n    }\n\n    function checkRevertMsg(bytes memory _returnData) internal pure returns (string memory) {\n        string memory revertMsg = MsgLib.getRevertMsg(_returnData);\n        checkAbortPrefix(revertMsg);\n        return revertMsg;\n    }\n\n    function checkAbortPrefix(string memory _revertMsg) private pure {\n        bytes memory prefixBytes = bytes(ABORT_PREFIX);\n        bytes memory msgBytes = bytes(_revertMsg);\n        if (msgBytes.length >= prefixBytes.length) {\n            for (uint256 i = 0; i < prefixBytes.length; i++) {\n                if (msgBytes[i] != prefixBytes[i]) {\n                    return; // prefix not match, return\n                }\n            }\n            revert(_revertMsg); // prefix match, revert\n        }\n    }\n}\n"
    },
    "contracts/message-bridge/libraries/RLPReader.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\n\n/*\n * @author Hamdi Allam hamdi.allam97@gmail.com\n * Please reach out with any questions or concerns\n */\npragma solidity >=0.5.10 <0.9.0;\n\nlibrary RLPReader {\n    uint8 constant STRING_SHORT_START = 0x80;\n    uint8 constant STRING_LONG_START = 0xb8;\n    uint8 constant LIST_SHORT_START = 0xc0;\n    uint8 constant LIST_LONG_START = 0xf8;\n    uint8 constant WORD_SIZE = 32;\n\n    struct RLPItem {\n        uint256 len;\n        uint256 memPtr;\n    }\n\n    struct Iterator {\n        RLPItem item; // Item that's being iterated over.\n        uint256 nextPtr; // Position of the next item in the list.\n    }\n\n    /*\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\n     * @param self The iterator.\n     * @return The next element in the iteration.\n     */\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\n        require(hasNext(self));\n\n        uint256 ptr = self.nextPtr;\n        uint256 itemLength = _itemLength(ptr);\n        self.nextPtr = ptr + itemLength;\n\n        return RLPItem(itemLength, ptr);\n    }\n\n    /*\n     * @dev Returns true if the iteration has more elements.\n     * @param self The iterator.\n     * @return true if the iteration has more elements.\n     */\n    function hasNext(Iterator memory self) internal pure returns (bool) {\n        RLPItem memory item = self.item;\n        return self.nextPtr < item.memPtr + item.len;\n    }\n\n    /*\n     * @param item RLP encoded bytes\n     */\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\n        uint256 memPtr;\n        assembly {\n            memPtr := add(item, 0x20)\n        }\n\n        return RLPItem(item.length, memPtr);\n    }\n\n    /*\n     * @dev Create an iterator. Reverts if item is not a list.\n     * @param self The RLP item.\n     * @return An 'Iterator' over the item.\n     */\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\n        require(isList(self));\n\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\n        return Iterator(self, ptr);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\n        return item.len;\n    }\n\n    /*\n     * @param the RLP item.\n     * @return (memPtr, len) pair: location of the item's payload in memory.\n     */\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\n        uint256 offset = _payloadOffset(item.memPtr);\n        uint256 memPtr = item.memPtr + offset;\n        uint256 len = item.len - offset; // data length\n        return (memPtr, len);\n    }\n\n    /*\n     * @param the RLP item.\n     */\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\n        (, uint256 len) = payloadLocation(item);\n        return len;\n    }\n\n    /*\n     * @param the RLP item containing the encoded list.\n     */\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\n        require(isList(item));\n\n        uint256 items = numItems(item);\n        RLPItem[] memory result = new RLPItem[](items);\n\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 dataLen;\n        for (uint256 i = 0; i < items; i++) {\n            dataLen = _itemLength(memPtr);\n            result[i] = RLPItem(dataLen, memPtr);\n            memPtr = memPtr + dataLen;\n        }\n\n        return result;\n    }\n\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\n    function isList(RLPItem memory item) internal pure returns (bool) {\n        if (item.len == 0) return false;\n\n        uint8 byte0;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < LIST_SHORT_START) return false;\n        return true;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of RLP encoded bytes.\n     */\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        uint256 ptr = item.memPtr;\n        uint256 len = item.len;\n        bytes32 result;\n        assembly {\n            result := keccak256(ptr, len)\n        }\n        return result;\n    }\n\n    /*\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\n     * @return keccak256 hash of the item payload.\n     */\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes32 result;\n        assembly {\n            result := keccak256(memPtr, len)\n        }\n        return result;\n    }\n\n    /** RLPItem conversions into data types **/\n\n    // @returns raw rlp encoding in bytes\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        bytes memory result = new bytes(item.len);\n        if (result.length == 0) return result;\n\n        uint256 ptr;\n        assembly {\n            ptr := add(0x20, result)\n        }\n\n        copy(item.memPtr, ptr, item.len);\n        return result;\n    }\n\n    // any non-zero byte except \"0x80\" is considered true\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\n        require(item.len == 1);\n        uint256 result;\n        uint256 memPtr = item.memPtr;\n        assembly {\n            result := byte(0, mload(memPtr))\n        }\n\n        // SEE Github Issue #5.\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\n        // \"0\" as \"0x80\" instead of as \"0\". We handle this edge case explicitly\n        // here.\n        if (result == 0 || result == STRING_SHORT_START) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    function toAddress(RLPItem memory item) internal pure returns (address) {\n        // 1 byte for the length prefix\n        require(item.len == 21);\n\n        return address(uint160(toUint(item)));\n    }\n\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\n        require(item.len > 0 && item.len <= 33);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n\n        uint256 result;\n        assembly {\n            result := mload(memPtr)\n\n            // shift to the correct location if neccesary\n            if lt(len, 32) {\n                result := div(result, exp(256, sub(32, len)))\n            }\n        }\n\n        return result;\n    }\n\n    // enforces 32 byte length\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\n        // one byte prefix\n        require(item.len == 33);\n\n        uint256 result;\n        uint256 memPtr = item.memPtr + 1;\n        assembly {\n            result := mload(memPtr)\n        }\n\n        return result;\n    }\n\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\n        require(item.len > 0);\n\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\n        bytes memory result = new bytes(len);\n\n        uint256 destPtr;\n        assembly {\n            destPtr := add(0x20, result)\n        }\n\n        copy(memPtr, destPtr, len);\n        return result;\n    }\n\n    /*\n     * Private Helpers\n     */\n\n    // @return number of payload items inside an encoded list.\n    function numItems(RLPItem memory item) private pure returns (uint256) {\n        if (item.len == 0) return 0;\n\n        uint256 count = 0;\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\n        uint256 endPtr = item.memPtr + item.len;\n        while (currPtr < endPtr) {\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\n            count++;\n        }\n\n        return count;\n    }\n\n    // @return entire rlp item byte length\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\n        uint256 itemLen;\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            itemLen = 1;\n        } else if (byte0 < STRING_LONG_START) {\n            itemLen = byte0 - STRING_SHORT_START + 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            assembly {\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\n                memPtr := add(memPtr, 1) // skip over the first byte\n\n                /* 32 byte word size */\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        } else if (byte0 < LIST_LONG_START) {\n            itemLen = byte0 - LIST_SHORT_START + 1;\n        } else {\n            assembly {\n                let byteLen := sub(byte0, 0xf7)\n                memPtr := add(memPtr, 1)\n\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\n                itemLen := add(dataLen, add(byteLen, 1))\n            }\n        }\n\n        return itemLen;\n    }\n\n    // @return number of bytes until the data\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\n        uint256 byte0;\n        assembly {\n            byte0 := byte(0, mload(memPtr))\n        }\n\n        if (byte0 < STRING_SHORT_START) {\n            return 0;\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\n            return 1;\n        } else if (byte0 < LIST_SHORT_START) {\n            // being explicit\n            return byte0 - (STRING_LONG_START - 1) + 1;\n        } else {\n            return byte0 - (LIST_LONG_START - 1) + 1;\n        }\n    }\n\n    /*\n     * @param src Pointer to source\n     * @param dest Pointer to destination\n     * @param len Amount of memory to copy from the source\n     */\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\n        if (len == 0) return;\n\n        // copy as many word sizes as possible\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\n            assembly {\n                mstore(dest, mload(src))\n            }\n\n            src += WORD_SIZE;\n            dest += WORD_SIZE;\n        }\n\n        if (len > 0) {\n            // left over bytes. Mask is used to remove unwanted bytes from the word\n            uint256 mask = 256 ** (WORD_SIZE - len) - 1;\n            assembly {\n                let srcpart := and(mload(src), not(mask)) // zero out src\n                let destpart := and(mload(dest), mask) // retrieve the bytes\n                mstore(dest, or(destpart, srcpart))\n            }\n        }\n    }\n}\n"
    },
    "contracts/message-bridge/MessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IMessageBridge.sol\";\nimport \"./interfaces/IMessageReceiverApp.sol\";\nimport \"./libraries/RLPReader.sol\";\nimport \"./libraries/MerkleProofTree.sol\";\nimport \"./libraries/MsgLib.sol\";\nimport \"../interfaces/IEthereumLightClient.sol\";\nimport \"../verifiers/interfaces/ISlotValueVerifier.sol\";\n\ncontract MessageBridge is IMessageBridge, ReentrancyGuard, Ownable {\n    using RLPReader for RLPReader.RLPItem;\n    using RLPReader for bytes;\n\n    /* Sender side (source chain) storage */\n    mapping(uint64 => bytes32) public sentMessages; // nonce -> messageId\n    uint256 constant SENT_MESSAGES_STORAGE_SLOT = 2;\n    uint64 public nonce;\n\n    /* Receiver side (dest chain) storage */\n    mapping(bytes32 => MessageStatus) public receivedMessages; // messageId -> status\n    mapping(uint256 => IEthereumLightClient) public lightClients; // chainId -> light client\n    mapping(uint256 => address) public remoteMessageBridges; // chainId -> source chain bridge\n    mapping(uint256 => bytes32) public remoteMessageBridgeHashes;\n    ISlotValueVerifier public slotValueVerifier;\n    // minimum amount of gas needed by this contract before it tries to deliver a message to the target.\n    uint256 public preExecuteMessageGasUsage;\n\n    /****************************************\n     * Sender side (source chain) functions *\n     ****************************************/\n\n    function sendMessage(uint64 _dstChainId, address _receiver, bytes calldata _message) external returns (bytes32) {\n        bytes32 messageId = MsgLib.computeMessageId(\n            nonce,\n            msg.sender,\n            _receiver,\n            uint64(block.chainid),\n            _dstChainId,\n            _message\n        );\n        sentMessages[nonce] = messageId;\n        emit MessageSent(messageId, nonce++, _dstChainId, msg.sender, _receiver, _message);\n        return messageId;\n    }\n\n    /****************************************\n     * Receiver side (dest chain) functions *\n     ****************************************/\n\n    function executeMessage(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes[] calldata _accountProof,\n        bytes[] calldata _storageProof\n    ) external nonReentrant returns (bool success) {\n        (bytes32 messageId, bytes32 slotKeyHash) = _getSlotAndMessageId(\n            _srcChainId,\n            _nonce,\n            _sender,\n            _receiver,\n            _message\n        );\n        _verifyAccountAndStorageProof(_srcChainId, messageId, slotKeyHash, _accountProof, _storageProof);\n        return _executeMessage(messageId, _srcChainId, _nonce, _sender, _receiver, _message);\n    }\n\n    function executeMessageWithZkProof(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes calldata _zkProofData,\n        bytes calldata _blkVerifyInfo\n    ) external nonReentrant returns (bool success) {\n        (bytes32 messageId, bytes32 slotKeyHash) = _getSlotAndMessageId(\n            _srcChainId,\n            _nonce,\n            _sender,\n            _receiver,\n            _message\n        );\n        _verifyZkSlotValueProof(_srcChainId, messageId, slotKeyHash, _zkProofData, _blkVerifyInfo);\n        return _executeMessage(messageId, _srcChainId, _nonce, _sender, _receiver, _message);\n    }\n\n    function setLightClient(uint64 _chainId, address _lightClient) external onlyOwner {\n        lightClients[_chainId] = IEthereumLightClient(_lightClient);\n    }\n\n    function setSlotValueVerifier(address _slotValueVerifier) external onlyOwner {\n        slotValueVerifier = ISlotValueVerifier(_slotValueVerifier);\n    }\n\n    function setRemoteMessageBridge(uint64 _chainId, address _remoteMessageBridge) external onlyOwner {\n        remoteMessageBridges[_chainId] = _remoteMessageBridge;\n        remoteMessageBridgeHashes[_chainId] = keccak256(abi.encodePacked(_remoteMessageBridge));\n    }\n\n    function setPreExecuteMessageGasUsage(uint256 _usage) public onlyOwner {\n        preExecuteMessageGasUsage = _usage;\n    }\n\n    function getExecutionStateRootAndSlot(uint64 _chainId) public view returns (bytes32 root, uint64 slot) {\n        return lightClients[_chainId].optimisticExecutionStateRootAndSlot();\n    }\n\n    function _getSlotAndMessageId(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message\n    ) private view returns (bytes32 messageId, bytes32 slotKeyHash) {\n        messageId = MsgLib.computeMessageId(_nonce, _sender, _receiver, _srcChainId, uint64(block.chainid), _message);\n        require(receivedMessages[messageId] == MessageStatus.Null, \"MessageBridge: message already executed\");\n        slotKeyHash = keccak256(abi.encode(keccak256(abi.encode(_nonce, SENT_MESSAGES_STORAGE_SLOT))));\n    }\n\n    function _verifyAccountAndStorageProof(\n        uint64 _srcChainId,\n        bytes32 _messageId,\n        bytes32 _slotKeyHash,\n        bytes[] calldata _accountProof,\n        bytes[] calldata _storageProof\n    ) private view {\n        require(\n            _retrieveStorageRoot(_srcChainId, _accountProof) == keccak256(_storageProof[0]),\n            \"MessageBridge: invalid storage root\"\n        );\n        bytes memory proof = MerkleProofTree.read(_slotKeyHash, _storageProof);\n        require(bytes32(proof.toRlpItem().toUint()) == _messageId, \"MessageBridge: invalid message hash\");\n    }\n\n    function _retrieveStorageRoot(uint64 _srcChainId, bytes[] calldata _accountProof) private view returns (bytes32) {\n        // verify accountProof and get storageRoot\n        (bytes32 executionStateRoot, ) = getExecutionStateRootAndSlot(_srcChainId);\n        require(executionStateRoot != bytes32(0), \"MessageBridge: execution state root not found\");\n        require(executionStateRoot == keccak256(_accountProof[0]), \"MessageBridge: invalid account proof root\");\n\n        // get storageRoot\n        bytes memory accountInfo = MerkleProofTree.read(remoteMessageBridgeHashes[_srcChainId], _accountProof);\n        RLPReader.RLPItem[] memory items = accountInfo.toRlpItem().toList();\n        require(items.length == 4, \"MessageBridge: invalid account decoded from RLP\");\n        return bytes32(items[2].toUint());\n    }\n\n    function _verifyZkSlotValueProof(\n        uint64 _srcChainId,\n        bytes32 _messageId,\n        bytes32 _slotKeyHash,\n        bytes calldata _zkProofData,\n        bytes calldata _blkVerifyInfo\n    ) private view {\n        ISlotValueVerifier.SlotInfo memory slotInfo = slotValueVerifier.verifySlotValue(\n            _srcChainId,\n            _zkProofData,\n            _blkVerifyInfo\n        );\n        require(slotInfo.slotKeyHash == _slotKeyHash, \"MessageBridge: slot key not match\");\n        require(slotInfo.slotValue == _messageId, \"MessageBridge: slot value not match\");\n        require(slotInfo.addrHash == remoteMessageBridgeHashes[_srcChainId], \"MessageBridge: src contract not match\");\n    }\n\n    function _executeMessage(\n        bytes32 _messageId,\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message\n    ) private returns (bool success) {\n        // execute message\n        bytes memory recieveCall = abi.encodeWithSelector(\n            IMessageReceiverApp.executeMessage.selector,\n            _srcChainId,\n            _sender,\n            _message,\n            msg.sender\n        );\n        uint256 gasLeftBeforeExecution = gasleft();\n        (bool ok, bytes memory res) = _receiver.call(recieveCall);\n        if (ok) {\n            success = abi.decode((res), (bool));\n        } else {\n            _handleExecutionRevert(_messageId, gasLeftBeforeExecution, res);\n        }\n        receivedMessages[_messageId] = success ? MessageStatus.Success : MessageStatus.Fail;\n        emit MessageExecuted(_messageId, _nonce, _srcChainId, _sender, _receiver, _message, success);\n        return success;\n    }\n\n    function _handleExecutionRevert(\n        bytes32 messageId,\n        uint256 _gasLeftBeforeExecution,\n        bytes memory _returnData\n    ) private {\n        uint256 gasLeftAfterExecution = gasleft();\n        uint256 maxTargetGasLimit = block.gaslimit - preExecuteMessageGasUsage;\n        if (_gasLeftBeforeExecution < maxTargetGasLimit && gasLeftAfterExecution <= _gasLeftBeforeExecution / 64) {\n            // if this happens, the execution must have not provided sufficient gas limit,\n            // then the tx should revert instead of recording a non-retryable failure status\n            // https://github.com/wolflo/evm-opcodes/blob/main/gas.md#aa-f-gas-to-send-with-call-operations\n            assembly {\n                invalid()\n            }\n        }\n        string memory revertMsg = MsgLib.checkRevertMsg(_returnData);\n        // otherwiase, emit revert message, return and mark the execution as failed (non-retryable)\n        emit MessageCallReverted(messageId, revertMsg);\n    }\n}\n"
    },
    "contracts/message-bridge/mock/MockMessageBridge.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../MessageBridge.sol\";\nimport \"../../interfaces/IEthereumLightClient.sol\";\n\ncontract MockLightClient is IEthereumLightClient {\n    uint64 public latestSlot; // slot of latest known block\n    bytes32 public stateRoot; // slot => header\n\n    function submitHeader(uint64 slot, bytes32 _stateRoot) external {\n        latestSlot = slot;\n        stateRoot = _stateRoot;\n    }\n\n    function finalizedExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (stateRoot, latestSlot);\n    }\n\n    function optimisticExecutionStateRootAndSlot() external view returns (bytes32 root, uint64 slot) {\n        return (stateRoot, latestSlot);\n    }\n}\n\ncontract MockMessageBridge {\n    MessageBridge public messageBridge;\n    MockLightClient public lightClient;\n\n    function initialize(\n        uint64 slot,\n        address _messageBridgeAddress,\n        address _mockLightClient,\n        bytes32 _mockStateRoot\n    ) public {\n        messageBridge = MessageBridge(_messageBridgeAddress);\n        lightClient = MockLightClient(_mockLightClient);\n        lightClient.submitHeader(slot, _mockStateRoot);\n    }\n\n    function testExecutedMessage(\n        uint64 _srcChainId,\n        uint64 _nonce,\n        address _sender,\n        address _receiver,\n        bytes calldata _message,\n        bytes[] calldata accountProof,\n        bytes[] calldata storageProof\n    ) external returns (bool success) {\n        return\n            messageBridge.executeMessage(_srcChainId, _nonce, _sender, _receiver, _message, accountProof, storageProof);\n    }\n}\n"
    },
    "contracts/test-helper/VerifierGasReport.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"../verifiers/interfaces/ITxVerifier.sol\";\nimport \"../verifiers/interfaces/IReceiptVerifier.sol\";\nimport \"../verifiers/interfaces/ISlotValueVerifier.sol\";\n\n// used for test gas consumptions of view functions\n\ninterface IProofVerifier {\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) external view returns (bool r);\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[9] memory input\n    ) external view returns (bool r);\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[8] memory input\n    ) external view returns (bool r);\n\n    function verifyRaw(bytes calldata proofData) external view returns (bool);\n}\n\ncontract VerifierGasReport {\n    address public verifier;\n\n    event ProofVerified(bool success);\n    event TxVerified(address from, bytes32 blkHash);\n\n    constructor(address _verifier) {\n        verifier = _verifier;\n    }\n\n    function transaction13VerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function transaction37VerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function transactionVerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function receiptVerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function ethStorageVerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[9] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function ethChunkOf4VerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[8] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function ethChunkOf128VerifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[8] memory input\n    ) external {\n        verifyProof(a, b, c, commit, input);\n    }\n\n    function verifyTx(bytes calldata txRaw, bytes calldata proofData, bytes calldata auxiBlkVerifyInfo) external {\n        ITxVerifier(verifier).verifyTx(txRaw, proofData, auxiBlkVerifyInfo);\n        emit ProofVerified(true);\n    }\n\n    function verifyReceipt(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external {\n        IReceiptVerifier(verifier).verifyReceipt(receiptRaw, proofData, auxiBlkVerifyInfo);\n        emit ProofVerified(true);\n    }\n\n    function verifyRaw(bytes calldata proofData) external {\n        bool success = IProofVerifier(verifier).verifyRaw(proofData);\n        emit ProofVerified(success);\n    }\n\n    function verifySlotValue(uint64 chainId, bytes calldata proofData, bytes calldata blkVerifyInfo) external {\n        ISlotValueVerifier(verifier).verifySlotValue(chainId, proofData, blkVerifyInfo);\n        emit ProofVerified(true);\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[6] memory input\n    ) private {\n        bool success = IProofVerifier(verifier).verifyProof(a, b, c, commit, input);\n        emit ProofVerified(success);\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[9] memory input\n    ) private {\n        bool success = IProofVerifier(verifier).verifyProof(a, b, c, commit, input);\n        emit ProofVerified(success);\n    }\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[2] memory commit,\n        uint256[8] memory input\n    ) private {\n        bool success = IProofVerifier(verifier).verifyProof(a, b, c, commit, input);\n        emit ProofVerified(success);\n    }\n\n    function setVerifier(address _verifier) external {\n        verifier = _verifier;\n    }\n}\n"
    },
    "contracts/verifiers/interfaces/IReceiptVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IReceiptVerifier {\n    struct ReceiptInfo {\n        bytes status;\n        uint64 cumulativeGasUsed;\n        bytes bloom;\n        LogInfo[] logs;\n        uint32 blkNum;\n        bytes32 blkHash;\n        uint64 blkTime;\n        uint64 chainId;\n    }\n\n    struct LogInfo {\n        address addr;\n        bytes32[] topics;\n        bytes data;\n    }\n\n    // reverts if not verified\n    // - receiptRaw: signed dynamic fee receipt rlp encode data\n    // - proofData: receipt proof data\n    // - auxiBlkVerifyInfo: auxiliary info for blk verify in chunk sync contract\n    function verifyReceipt(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external view returns (ReceiptInfo memory receiptInfo);\n\n    // verifyReceipt and emit event\n    function verifyReceiptAndLog(\n        bytes calldata receiptRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (ReceiptInfo memory receiptInfo);\n}\n"
    },
    "contracts/verifiers/interfaces/ISlotValueVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface ISlotValueVerifier {\n    struct SlotInfo {\n        uint64 chainId;\n        bytes32 addrHash;\n        bytes32 blkHash;\n        bytes32 slotKeyHash;\n        bytes32 slotValue;\n        uint32 blkNum;\n    }\n\n    /**\n     * @notice Called by dApp contracts to verify a slot value\n     * @param chainId The source chain ID for which the proof data was generated\n     * @param proofData Groth16 proof data, with the appended public inputs.\n     * @param blkVerifyInfo Data passed to the BlockSyncer to validate the block in the source chain.\n     */\n    function verifySlotValue(\n        uint64 chainId,\n        bytes calldata proofData,\n        bytes calldata blkVerifyInfo\n    ) external view returns (SlotInfo memory slotInfo);\n}\n"
    },
    "contracts/verifiers/interfaces/ITxVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface ITxVerifier {\n    struct TxInfo {\n        uint64 chainId;\n        uint64 nonce;\n        uint256 gasTipCap;\n        uint256 gasFeeCap;\n        uint256 gas;\n        address to;\n        uint256 value;\n        bytes data;\n        address from; // calculate from V R S\n        uint32 blkNum;\n        bytes32 blkHash;\n        uint64 blkTime;\n    }\n\n    // reverts if not verified\n    // - txRaw: signed dynamic fee tx rlp encode data\n    // - proofData: tx proof data\n    // - auxiBlkVerifyInfo: auxiliary info for blk verify in chunk sync contract\n    function verifyTx(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external view returns (TxInfo memory txInfo);\n\n    // verifyTx and emit event\n    function verifyTxAndLog(\n        bytes calldata txRaw,\n        bytes calldata proofData,\n        bytes calldata auxiBlkVerifyInfo\n    ) external returns (TxInfo memory info);\n}\n"
    },
    "contracts/verifiers/interfaces/IZkpVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\ninterface IZkpVerifier {\n    function verifyRaw(bytes calldata proofData) external view returns (bool r);\n}\n"
    },
    "contracts/verifiers/SlotValueVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.18;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/ISlotValueVerifier.sol\";\nimport \"./interfaces/IZkpVerifier.sol\";\nimport \"../chunk-sync/interfaces/IBlockChunks.sol\";\n\ncontract SlotValueVerifier is ISlotValueVerifier, Ownable {\n    uint32 constant PUBLIC_BYTES_START_IDX = 10 * 32;\n\n    // retrieved from proofData, to align the fields with circuit...\n    struct ProofData {\n        bytes32 blkHash;\n        bytes32 addrHash;\n        bytes32 slotKeyHash;\n        bytes32 slotValue;\n        uint32 blkNum;\n    }\n\n    mapping(uint64 => address) public verifierAddresses; // chainid => snark verifier contract address\n    address public BlockChunks;\n\n    event UpdateVerifierAddress(uint64 chainId, address newAddress);\n    event UpdateBlockChunks(address newAddress);\n\n    constructor(address _blocChunks) {\n        BlockChunks = _blocChunks;\n    }\n\n    function updateVerifierAddress(uint64 _chainId, address _verifierAddress) external onlyOwner {\n        verifierAddresses[_chainId] = _verifierAddress;\n        emit UpdateVerifierAddress(_chainId, _verifierAddress);\n    }\n\n    function updateBlockChunks(address _BlockChunks) external onlyOwner {\n        BlockChunks = _BlockChunks;\n        emit UpdateBlockChunks(_BlockChunks);\n    }\n\n    function verifySlotValue(\n        uint64 chainId,\n        bytes calldata proofData,\n        bytes calldata blkVerifyInfo\n    ) external view returns (SlotInfo memory slotInfo) {\n        require(verifyRaw(chainId, proofData));\n\n        (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) = getFromBlkVerifyInfo(blkVerifyInfo);\n        ProofData memory data = getProofData(proofData);\n\n        IBlockChunks.BlockHashWitness memory witness = IBlockChunks.BlockHashWitness({\n            chainId: chainId,\n            blkNum: data.blkNum,\n            claimedBlkHash: data.blkHash,\n            prevHash: prevHash,\n            numFinal: numFinal,\n            merkleProof: merkleProof\n        });\n        require(IBlockChunks(BlockChunks).isBlockHashValid(witness), \"invalid blkHash\");\n\n        slotInfo.chainId = chainId;\n        slotInfo.blkHash = data.blkHash;\n        slotInfo.addrHash = data.addrHash;\n        slotInfo.blkNum = data.blkNum;\n        slotInfo.slotKeyHash = data.slotKeyHash;\n        slotInfo.slotValue = data.slotValue;\n    }\n\n    function verifyRaw(uint64 chainId, bytes calldata proofData) private view returns (bool) {\n        require(verifierAddresses[chainId] != address(0), \"chain verifier not set\");\n        return (IZkpVerifier)(verifierAddresses[chainId]).verifyRaw(proofData);\n    }\n\n    function getFromBlkVerifyInfo(\n        bytes calldata blkVerifyInfo\n    ) internal pure returns (bytes32 prevHash, uint32 numFinal, bytes32[7] memory merkleProof) {\n        require(blkVerifyInfo.length == 8 * 32 + 4, \"incorrect blkVerifyInfo\");\n        prevHash = bytes32(blkVerifyInfo[:32]);\n        numFinal = uint32(bytes4(blkVerifyInfo[32:36]));\n\n        for (uint8 idx = 0; idx < 6; idx++) {\n            merkleProof[idx] = bytes32(blkVerifyInfo[36 + 32 * idx:36 + 32 * (idx + 1)]);\n        }\n\n        merkleProof[6] = bytes32(blkVerifyInfo[36 + 32 * 6:36 + 32 * (6 + 1)]);\n    }\n\n    // groth16 proof + public inputs\n    // public inputs:\n    //  block hash\n    //  contractAddrHash\n    //  slot key\n    //  slot value\n    //  block number\n    function getProofData(bytes calldata proofData) internal pure returns (ProofData memory data) {\n        data.blkHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX:PUBLIC_BYTES_START_IDX + 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 32 + 16:PUBLIC_BYTES_START_IDX + 2 * 32]))\n        );\n        data.addrHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 2 * 32:PUBLIC_BYTES_START_IDX + 3 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 3 * 32 + 16:PUBLIC_BYTES_START_IDX + 4 * 32]))\n        );\n        data.slotKeyHash = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 4 * 32:PUBLIC_BYTES_START_IDX + 5 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 5 * 32 + 16:PUBLIC_BYTES_START_IDX + 6 * 32]))\n        );\n        data.slotValue = bytes32(\n            (uint256(bytes32(proofData[PUBLIC_BYTES_START_IDX + 6 * 32:PUBLIC_BYTES_START_IDX + 7 * 32])) << 128) |\n                uint128(bytes16(proofData[PUBLIC_BYTES_START_IDX + 7 * 32 + 16:PUBLIC_BYTES_START_IDX + 8 * 32]))\n        );\n        data.blkNum = uint32(bytes4(proofData[PUBLIC_BYTES_START_IDX + 9 * 32 - 4:PUBLIC_BYTES_START_IDX + 9 * 32]));\n    }\n}\n"
    },
    "solidity-bytes-utils/contracts/BytesLib.sol": {
      "content": "// SPDX-License-Identifier: Unlicense\n/*\n * @title Solidity Bytes Arrays Utils\n * @author Gonçalo Sá <goncalo.sa@consensys.net>\n *\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\n */\npragma solidity >=0.8.0 <0.9.0;\n\n\nlibrary BytesLib {\n    function concat(\n        bytes memory _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes.slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes.slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes.slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(\n        bytes memory _bytes,\n        uint256 _start,\n        uint256 _length\n    )\n        internal\n        pure\n        returns (bytes memory)\n    {\n        require(_length + 31 >= _length, \"slice_overflow\");\n        require(_bytes.length >= _start + _length, \"slice_outOfBounds\");\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n                //zero out the 32 bytes slice we are about to return\n                //we need to do it because Solidity does not garbage collect\n                mstore(tempBytes, 0)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\n        require(_bytes.length >= _start + 20, \"toAddress_outOfBounds\");\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\n        require(_bytes.length >= _start + 1 , \"toUint8_outOfBounds\");\n        uint8 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x1), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\n        require(_bytes.length >= _start + 2, \"toUint16_outOfBounds\");\n        uint16 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x2), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\n        require(_bytes.length >= _start + 4, \"toUint32_outOfBounds\");\n        uint32 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x4), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\n        require(_bytes.length >= _start + 8, \"toUint64_outOfBounds\");\n        uint64 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x8), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\n        require(_bytes.length >= _start + 12, \"toUint96_outOfBounds\");\n        uint96 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0xc), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\n        require(_bytes.length >= _start + 16, \"toUint128_outOfBounds\");\n        uint128 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x10), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\n        require(_bytes.length >= _start + 32, \"toUint256_outOfBounds\");\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\n        require(_bytes.length >= _start + 32, \"toBytes32_outOfBounds\");\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint256(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(\n        bytes storage _preBytes,\n        bytes memory _postBytes\n    )\n        internal\n        view\n        returns (bool)\n    {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes.slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes.slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint256(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}