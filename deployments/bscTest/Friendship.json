{
  "address": "0x694609Aae4773EB66298D6ab4D01ea70e82F5da0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ITxVerifier",
          "name": "_txVerifier",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "chainId",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "timestamp",
          "type": "uint64"
        }
      ],
      "name": "VerifiedFriendship",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lastestTxTimestamps",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ITxVerifier",
          "name": "_txVerifier",
          "type": "address"
        }
      ],
      "name": "setTxVerifier",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_tx",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_proof",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_auxiBlkVerifyInfo",
          "type": "bytes"
        }
      ],
      "name": "submitFriendshipProof",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "txVerifier",
      "outputs": [
        {
          "internalType": "contract ITxVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xdbd61ca69455100195741cd084dfd77d7054b9d6ca167f11065c1bda78faebc3",
  "receipt": {
    "to": null,
    "from": "0x9532f934EfcE6c4Bf5BA078b25fDd81a780FBdfB",
    "contractAddress": "0x694609Aae4773EB66298D6ab4D01ea70e82F5da0",
    "transactionIndex": 4,
    "gasUsed": "525182",
    "logsBloom": "0x
    "blockHash": "0x526d0508f3188f7b5e8a2a858bd6d7e901c1762b894e95224556f9cea4b9d55d",
    "transactionHash": "0xdbd61ca69455100195741cd084dfd77d7054b9d6ca167f11065c1bda78faebc3",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 30679657,
        "transactionHash": "0xdbd61ca69455100195741cd084dfd77d7054b9d6ca167f11065c1bda78faebc3",
        "address": "0x694609Aae4773EB66298D6ab4D01ea70e82F5da0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009532f934efce6c4bf5ba078b25fdd81a780fbdfb"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0x526d0508f3188f7b5e8a2a858bd6d7e901c1762b894e95224556f9cea4b9d55d"
      }
    ],
    "blockNumber": 30679657,
    "cumulativeGasUsed": "2211114",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD9C0bC3BCe36F478c71746d51B833C99E99D568F"
  ],
  "numDeployments": 4,
  "solcInputHash": "88412c49ed27190cac976e00b987d18e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"chainId\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"timestamp\",\"type\":\"uint64\"}],\"name\":\"VerifiedFriendship\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lastestTxTimestamps\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ITxVerifier\",\"name\":\"_txVerifier\",\"type\":\"address\"}],\"name\":\"setTxVerifier\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_tx\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_proof\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_auxiBlkVerifyInfo\",\"type\":\"bytes\"}],\"name\":\"submitFriendshipProof\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"txVerifier\",\"outputs\":[{\"internalType\":\"contract ITxVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/apps/friendship/Friendship.sol\":\"Friendship\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/apps/friendship/Friendship.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../../verifiers/interfaces/ITxVerifier.sol\\\";\\n\\ncontract Friendship is Ownable {\\n    ITxVerifier public txVerifier;\\n\\n    // (chainId, sender, receiver) -> timestamp of latest tx\\n    mapping(uint64 => mapping(address => mapping(address => uint64))) public lastestTxTimestamps;\\n\\n    event VerifiedFriendship(uint64 chainId, address from, address to, uint64 timestamp);\\n\\n    constructor(ITxVerifier _txVerifier) {\\n        txVerifier = _txVerifier;\\n    }\\n\\n    function submitFriendshipProof(\\n        bytes calldata _tx,\\n        bytes calldata _proof,\\n        bytes calldata _auxiBlkVerifyInfo\\n    ) external {\\n        ITxVerifier.TxInfo memory txInfo = txVerifier.verifyTxAndLog(_tx, _proof, _auxiBlkVerifyInfo);\\n        require(txInfo.blkTime > lastestTxTimestamps[txInfo.chainId][txInfo.from][txInfo.to], \\\"not latest tx\\\");\\n        lastestTxTimestamps[txInfo.chainId][txInfo.from][txInfo.to] = txInfo.blkTime;\\n        emit VerifiedFriendship(txInfo.chainId, txInfo.from, txInfo.to, txInfo.blkTime);\\n    }\\n\\n    function setTxVerifier(ITxVerifier _txVerifier) external onlyOwner {\\n        txVerifier = _txVerifier;\\n    }\\n}\\n\",\"keccak256\":\"0xdfca32a465a33ac7542748d4a632da4f44277ed1fa69617510cef87ad5c018a7\",\"license\":\"MIT\"},\"contracts/verifiers/interfaces/ITxVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.18;\\n\\ninterface ITxVerifier {\\n    struct TxInfo {\\n        uint64 chainId;\\n        uint64 nonce;\\n        uint256 gasTipCap;\\n        uint256 gasFeeCap;\\n        uint256 gas;\\n        address to;\\n        uint256 value;\\n        bytes data;\\n        address from; // calculate from V R S\\n        uint32 blkNum;\\n        bytes32 blkHash;\\n        uint64 blkTime;\\n    }\\n\\n    // reverts if not verified\\n    // - txRaw: signed dynamic fee tx rlp encode data\\n    // - proofData: tx proof data\\n    // - auxiBlkVerifyInfo: auxiliary info for blk verify in chunk sync contract\\n    function verifyTx(\\n        bytes calldata txRaw,\\n        bytes calldata proofData,\\n        bytes calldata auxiBlkVerifyInfo\\n    ) external view returns (TxInfo memory txInfo);\\n\\n    // verifyTx and emit event\\n    function verifyTxAndLog(\\n        bytes calldata txRaw,\\n        bytes calldata proofData,\\n        bytes calldata auxiBlkVerifyInfo\\n    ) external returns (TxInfo memory info);\\n}\\n\",\"keccak256\":\"0xad6e03fef79d191a997fbd832859c2b64d34ba5a03525ccdff842e84519c9622\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080346100a757601f61087638819003918201601f19168301916001600160401b038311848410176100ac578084926020946040528339810103126100a757516001600160a01b0390818116908190036100a75760005460018060a01b0319903382821617600055604051933391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360015416176001556107b390816100c38239f35b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060408181526004908136101561001657600080fd5b600092833560e01c90816320b35420146102f25750806323a45c93146102ca5780632941644214610250578063715018a6146101e35780638da5cb5b146101bd5780639f38dbf9146101645763f2fde38b1461007157600080fd5b34610160576020366003190112610160578135916001600160a01b039081841680940361015c578454918216926100a93385146106b0565b84156100f357505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5050346101b95760203660031901126101b957356001600160a01b03808216809203610160576101989083541633146106b0565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b5080fd5b8382346101b957816003193601126101b9576001600160a01b0360209254169051908152f35b833461024d578060031936011261024d5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916102233384146106b0565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610160576060366003190112610160573567ffffffffffffffff908181168091036102c6576024356001600160a01b03918282168092036102c2576044359283168093036102c25791859185936020975260028752838320908352865282822090825285522054169051908152f35b8580fd5b8380fd5b8382346101b957816003193601126101b9576020906001600160a01b03600154169051908152f35b919050346102c6576003199060603683011261015c5767ffffffffffffffff918585358481116101b957610329903690880161067d565b926024358681116102c6576103419036908a0161067d565b906044358881116102c25789948b948694889486946103639036908a0161067d565b9290946001600160a01b039c8d600154169a631b08846f60e11b895288016060905260648801906103939261075c565b90848783030160248801526103a79261075c565b918483030160448501526103ba9261075c565b03925af19384156106735786946104df575b5061016084019280845116918186511688526020956002875284892097610100820198838a51168b528852858a209460a0830195848751168c52895284878c205416101561049c575091818694928287958c60809b99837f18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b619e9c51169184845116815260028c528c8683832091511682528c52818120868a511682528c52209067ffffffffffffffff1982541617905551169751169251169351169382519586528501528301526060820152a180f35b855162461bcd60e51b8152908101889052600d60248201527f6e6f74206c6174657374207478000000000000000000000000000000000000006044820152606490fd5b9093503d8087833e6104f181836106fb565b8101602091828183031261066f578051908582116106275701906101809283838303126106275784519384018481108782111761065c57855261053383610733565b8452610540818401610733565b818501528483015185850152606083015160608501526080830151608085015261056c60a08401610748565b60a085015260c083015160c085015260e083015186811161065857830182601f8201121561065857805190878211610645578651936105b4601f8401601f19168501866106fb565b82855283838301011161064157908a9291835b82811061062b5750508301015260e08301526101006105e7818301610748565b90830152610120808201519063ffffffff8216820361062757830152610140808201519083015261061c610160809201610733565b9082015292386103cc565b8880fd5b8181018401518682018501528c945083016105c7565b8a80fd5b634e487b7160e01b8b5260418a5260248bfd5b8980fd5b634e487b7160e01b8a526041895260248afd5b8780fd5b82513d88823e3d90fd5b9181601f840112156106ab5782359167ffffffffffffffff83116106ab57602083818601950101116106ab57565b600080fd5b156106b757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761071d57604052565b634e487b7160e01b600052604160045260246000fd5b519067ffffffffffffffff821682036106ab57565b51906001600160a01b03821682036106ab57565b908060209392818452848401376000828201840152601f01601f191601019056fea26469706673582212207a5eeabf3e34b356c96f23a2e37e3bf247fb34d928cbdc6a6cd73a1532ae512d64736f6c63430008120033",
  "deployedBytecode": "0x608060408181526004908136101561001657600080fd5b600092833560e01c90816320b35420146102f25750806323a45c93146102ca5780632941644214610250578063715018a6146101e35780638da5cb5b146101bd5780639f38dbf9146101645763f2fde38b1461007157600080fd5b34610160576020366003190112610160578135916001600160a01b039081841680940361015c578454918216926100a93385146106b0565b84156100f357505073ffffffffffffffffffffffffffffffffffffffff1916821783557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152fd5b8480fd5b8280fd5b5050346101b95760203660031901126101b957356001600160a01b03808216809203610160576101989083541633146106b0565b73ffffffffffffffffffffffffffffffffffffffff19600154161760015580f35b5080fd5b8382346101b957816003193601126101b9576001600160a01b0360209254169051908152f35b833461024d578060031936011261024d5780805473ffffffffffffffffffffffffffffffffffffffff196001600160a01b038216916102233384146106b0565b1682557f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b509034610160576060366003190112610160573567ffffffffffffffff908181168091036102c6576024356001600160a01b03918282168092036102c2576044359283168093036102c25791859185936020975260028752838320908352865282822090825285522054169051908152f35b8580fd5b8380fd5b8382346101b957816003193601126101b9576020906001600160a01b03600154169051908152f35b919050346102c6576003199060603683011261015c5767ffffffffffffffff918585358481116101b957610329903690880161067d565b926024358681116102c6576103419036908a0161067d565b906044358881116102c25789948b948694889486946103639036908a0161067d565b9290946001600160a01b039c8d600154169a631b08846f60e11b895288016060905260648801906103939261075c565b90848783030160248801526103a79261075c565b918483030160448501526103ba9261075c565b03925af19384156106735786946104df575b5061016084019280845116918186511688526020956002875284892097610100820198838a51168b528852858a209460a0830195848751168c52895284878c205416101561049c575091818694928287958c60809b99837f18eb7dc8e9eac54221f8bfdf39676d5acfbf070a849d17ff7653087b2c221b619e9c51169184845116815260028c528c8683832091511682528c52818120868a511682528c52209067ffffffffffffffff1982541617905551169751169251169351169382519586528501528301526060820152a180f35b855162461bcd60e51b8152908101889052600d60248201527f6e6f74206c6174657374207478000000000000000000000000000000000000006044820152606490fd5b9093503d8087833e6104f181836106fb565b8101602091828183031261066f578051908582116106275701906101809283838303126106275784519384018481108782111761065c57855261053383610733565b8452610540818401610733565b818501528483015185850152606083015160608501526080830151608085015261056c60a08401610748565b60a085015260c083015160c085015260e083015186811161065857830182601f8201121561065857805190878211610645578651936105b4601f8401601f19168501866106fb565b82855283838301011161064157908a9291835b82811061062b5750508301015260e08301526101006105e7818301610748565b90830152610120808201519063ffffffff8216820361062757830152610140808201519083015261061c610160809201610733565b9082015292386103cc565b8880fd5b8181018401518682018501528c945083016105c7565b8a80fd5b634e487b7160e01b8b5260418a5260248bfd5b8980fd5b634e487b7160e01b8a526041895260248afd5b8780fd5b82513d88823e3d90fd5b9181601f840112156106ab5782359167ffffffffffffffff83116106ab57602083818601950101116106ab57565b600080fd5b156106b757565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff82111761071d57604052565b634e487b7160e01b600052604160045260246000fd5b519067ffffffffffffffff821682036106ab57565b51906001600160a01b03821682036106ab57565b908060209392818452848401376000828201840152601f01601f191601019056fea26469706673582212207a5eeabf3e34b356c96f23a2e37e3bf247fb34d928cbdc6a6cd73a1532ae512d64736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/apps/friendship/Friendship.sol:Friendship",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3304,
        "contract": "contracts/apps/friendship/Friendship.sol:Friendship",
        "label": "txVerifier",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ITxVerifier)70362"
      },
      {
        "astId": 3312,
        "contract": "contracts/apps/friendship/Friendship.sol:Friendship",
        "label": "lastestTxTimestamps",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint64,t_mapping(t_address,t_mapping(t_address,t_uint64)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITxVerifier)70362": {
        "encoding": "inplace",
        "label": "contract ITxVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint64))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint64))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint64)"
      },
      "t_mapping(t_address,t_uint64)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint64)",
        "numberOfBytes": "32",
        "value": "t_uint64"
      },
      "t_mapping(t_uint64,t_mapping(t_address,t_mapping(t_address,t_uint64)))": {
        "encoding": "mapping",
        "key": "t_uint64",
        "label": "mapping(uint64 => mapping(address => mapping(address => uint64)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_mapping(t_address,t_uint64))"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}